{"meta":{"title":"LiuChengBlog","subtitle":"","description":"","author":"Liu Cheng","url":"https://liuchengblog.github.io","root":"/"},"pages":[{"title":"404","date":"01-08","updated":"01-08","comments":true,"path":"404/index.html","permalink":"https://liuchengblog.github.io/404/index.html","excerpt":"","text":""},{"title":"我是谁？","date":"01-13","updated":"01-13","comments":true,"path":"about/index.html","permalink":"https://liuchengblog.github.io/about/index.html","excerpt":"","text":"20岁肥宅一名，梦想变成肌肉猛汉！ 目前努力学习人工智能方向的知识，所以自己搞了网站记录学习的过程 还有在自学英语，梦想成为带语言家 站中有自己整理的学习笔记、英语笔记、在学习编程中遇到的问题和心得 可能还有一些肥宅快乐资源 希望能和大家共同进步 也欢迎访问我的其他个人账号：CSDN、bilibili、Github"},{"title":"分类","date":"01-13","updated":"01-13","comments":true,"path":"categories/index.html","permalink":"https://liuchengblog.github.io/categories/index.html","excerpt":"","text":"人工智能学习"},{"title":"tags","date":"01-13","updated":"01-13","comments":true,"path":"tags/index.html","permalink":"https://liuchengblog.github.io/tags/index.html","excerpt":"","text":""},{"title":"search","date":"01-08","updated":"01-08","comments":true,"path":"search/index.html","permalink":"https://liuchengblog.github.io/search/index.html","excerpt":"","text":""}],"posts":[{"title":"托福听力：TPO54-C1","slug":"2、YY-06","date":"02-15","updated":"02-15","comments":true,"path":"2020/02/15/2、YY-06/","link":"","permalink":"https://liuchengblog.github.io/2020/02/15/2%E3%80%81YY-06/","excerpt":"","text":"var ap = new APlayer({ element: document.getElementById(\"aplayer-UPtmmvms\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"TPO54-C1\", author: \"TPO\", url: \"TPO54-C1.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 1、题目 题目 答案 1.Why does the student go to see the professor?A. To learn about the background of a director who was discussed in classB. To ask permission to use a specific type of theater for her class assignmentC. To discuss the symbolism in a play she wants to use for her assignmentD. To find out what scenery she is allowed to use in presenting her assignment 答案：B 2.Why does the professor discuss the political environment in the United States in the 1960s?A. To compare events at that time to events that occurred in one of Stephenson’s playsB. To suggest that the woman do additional research on that period of United States historyC. To point out why political themes are common in folk and fairy talesD. To explain Sills’s inspiration for his first story theatre production 答案：D 3.According to the professor, what does the blue light in the fairy tale called “The Blue Light” represent?A. A plan that is impossible to followB. A conflict between two opposing forcesC. A solution to complex problemsD. A question that has no clear answer 答案：C 4.What is the professor’s opinion about Sills’s production of The Blue Light?A. He thinks that it was an inventive and powerful performance.B. He believes that the use of some props would have enhanced the performance.C. He thinks that the theme is even more relevant today than it was in the 1960s.D. He believes that it was less effective stylistically than some of Stephenson’s plays. 答案：A 5.According to the professor, what is the most important difference between Stephenson’s and Sills’s style of story theatre?A. The actor who plays the role of the narrator plays only that role in Stephenson’s productions.B. The actors wear elaborate costumes in Stephenson’s productions.C. The stage settings are realistic in Stephenson’s productions.D. Political themes are avoided in Stephenson’s productions. 答案：A 2、单词积累 单词 音标 释义 In one’s approach (to) 在处理…时, 在与…打交道时 narrate /ˈnæreɪt/ 讲(故事); 叙述; 给(纪录片或节目)作解说; narrator /ˈnæreɪtər/ 解说员；读旁白的人 props /prɑːp/ n. 道具；支撑；支持者 v. 支撑 disillusioned /ˌdɪsɪˈluːʒnd/ adj. 大失所望的; 不再抱幻想的; 幻想破灭的; grapple /ˈɡræpl/ v. 扭打; 搏斗; 努力设法解决; be grappling with 正在努力解决… a way out of 解决问题的办法 turmoil /ˈtɜːrmɔɪl/ n. 动乱; 骚动; 混乱; 焦虑; bare /ber/ 裸露的；光秃秃的 departure /dɪˈpɑːrtʃər/ 离程；离开；违背 sweep up 打扫；兴奋起来了 innovative /ˈɪnəveɪtɪv/ 创新的；革命的 3、原文解析Student: So, Professor Baker, about our next assignment you talked about in class. Professor: Yes, this time you’ll be in groups of three, each of you will have a chance to direct the other two in a short scene from a play you’ve chosen yourself. Student: Right, and, well, I’ve been reading about story theater, and… Professor: Ah, story theater, tell me about what you’ve read. Student: Well, it’s a form of theater where folk or fairy tales are acted out. It was…eh, introduced, by the director Paul Sills in the 1960s. In Sills’s approach, an actor both narrates, and acts out a tale. So, like someone will appear on stage, and then will start narrating a tale, about…say a king, and then the same person will immediately switch to and start acting out the role of the king, with no props or scenery. Professor: Sills, you know I actually saw his first story theater production in 1968, he did the fairy tale ‘the blue light’. Student: Really, so whatever gave him the idea to produce that? Professor: Well, as you know, back in the late 1960s, lots of people in the United States were disillusioned with the government. Sills was grappling with how to produce theater that was relevant in such times. Then he happened to read ‘the blue light’, and he realized that it had just the message he wanted. See, in the story, a man has lost all hope as a result of the unfortunate events in his life, completely turns his life around, with the help of a magical blue light. So, the blue light in the story symbolizes a way out of seemingly unsolvable human problems. And for Sills, that light symbolized an answer to the political turmoil in the US. Student: But weren’t you…um, audiences bother that the actors were performing on a bare stage? Professor: Well, story theater is a departure from traditional dramatic theater with its realistic elaborate props and scenery, but Sills could make us see, say a big tall mountain through the facial expressions and body movements of the actors, and they’re telling of the story. We were all swept up, energized by such an innovative approach to theater, even if one or two of the critics weren’t as enthusiastic. Student: Cool, so, anyway. What I really wanted to ask, I’d love to try doing story theater for my project instead of just a scene from a traditional play. Professor: Um, that’s possible. A short tale can be about the same length as a single scene. Which fairy tale would you do? Student: Actually, I was reading about another director of story theater, Rack Stevenson. You know, he produces plays based on folk tales as well. Maybe I could direct one of those. Professor: Okay, yes, Rack Stevenson. Now, Stevenson’s style’s story theater is a little different from Sills’s. He’ll use simple props, a chair will represent a mountain, but the significant difference is with the narrator. The narrator will play only that role. Let’s talk about why.","categories":[{"name":"英语学习","slug":"英语学习","permalink":"https://liuchengblog.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"托福听力","slug":"托福听力","permalink":"https://liuchengblog.github.io/tags/%E6%89%98%E7%A6%8F%E5%90%AC%E5%8A%9B/"}]},{"title":"人工智能学习目录","slug":"1、ZN-01","date":"02-01","updated":"02-01","comments":true,"path":"2020/02/01/1、ZN-01/","link":"","permalink":"https://liuchengblog.github.io/2020/02/01/1%E3%80%81ZN-01/","excerpt":"","text":"以《机器学习》、《深度学习》两本书为基本辅以CS231n和CS224n的视频课使用python3.7 + pycharm + pytorch + TensorFlow 来编程实现代码同时进行CV和NLP两个方向的论文学习最后进行几个实际的项目的实战 基础部分1、Anaconda搭建人工智能与深度学习平台2、Python基础&ensp;&ensp;Python基础①：基础语法元素&ensp;&ensp;Python基础②：基本数据类型&ensp;&ensp;Python基础③：组合数据类型&ensp;&ensp;Python基础④：程序控制结构&ensp;&ensp;Python基础⑤：函数&ensp;&ensp;Python基础⑥：类和对象&ensp;&ensp;Python基础⑦：文件读写、模块、包和库&ensp;&ensp;Python基础⑧：异常处理&ensp;&ensp;Python基础⑨：标准库&ensp;&ensp;Python基础⑩：numpy库3、PyTorch基础4、数学基础 算法部分说在前面！一定要看啊，节省时间！1、监督算法&ensp;&ensp;线性模型&ensp;&ensp;逻辑回归&ensp;&ensp;决策树&ensp;&ensp;支持向量机&ensp;&ensp;贝叶斯分类&ensp;&ensp;K近邻&ensp;&ensp;集成学习——随机森林&ensp;&ensp;集成学习——Adaboost&ensp;&ensp;集成学习——GDBT&ensp;&ensp;深度学习与神经网络2、半监督算法&ensp;&ensp;概率图模型&ensp;&ensp;半监督支持向量机3、无监督算法&ensp;&ensp;K-Means聚类&ensp;&ensp;降维与PCA主成分分析&ensp;&ensp;无监督的神经网络GAN4、强化学习&ensp;&ensp;蒙特卡罗树&ensp;&ensp;Q-Learning 领域应用CS231n课程——图像领域CS224n课程——自然语言领域 项目实战自动编曲人脸检测识别图片生成文字","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Python基础⑩：numpy库","slug":"1、ZN-13","date":"02-01","updated":"02-01","comments":true,"path":"2020/02/01/1、ZN-13/","link":"","permalink":"https://liuchengblog.github.io/2020/02/01/1%E3%80%81ZN-13/","excerpt":"","text":"1、numpy基础12345678910111213141516171819import numpy as nparray = np.array([[1, 2, 3], [4, 5, 6]]) # 把列表转成矩阵print(array)print('number of dim:', array.ndim) # 维度print('shape:', array.shape)print('size:', array.size)a = np.array([2, 23, 4], dtype=np.float32) # 指定格式print(a.dtype)a = np.arange(10, 20, 2)print(a)a = np.arange(12).reshape((3, 4))print(a)a = np.linspace(1, 10, 5) # 1到10分成5分print(a) 2、numpy数组运算1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import numpy as npa = np.array([10,20,30,40])b = np.array(4)print(a,b)c = a +bprint(c)c = b ** 2print(c)c = 10*np.sin(a)print(c)print(b)print(b&lt;3)# 矩阵相乘a = [[1,2],[3,4]]b = [[2,3],[4,5]]c = np.multiply(a,b) # 对应元素相乘c_dot = np.dot(a,b) # 矩阵相乘print(c)print(c_dot)a= np.random.random((2,4))print(a.max())print(a.sum())a = [[1,2],[3,4]]print(np.argmax(a)) # 找到最大的位置print(np.mean(a)) # 平均值print(np.median(a)) # 中位数print(np.cumsum(a)) # 累加求和print(np.diff(a)) # 累差print(np.nonzero(a)) # 返回出非0元素的行列a = np.arange(14,2,-1)print(a.T) # 矩阵转置print(np.transpose(a))print(np.clip(a,5,9)) # 小于5的变成5，大于9的变成9a= np.arange(3,15).reshape((3,4))print(a)print(a.flatten()) # flatten返回的是个数组for item in a.flat: # flat返回的是个对象 print(item) A= np.array([1,1,1])B = np.array([2,2,2])C = np.vstack((A,B)) # 上下合并D= np.hstack((A,B)) # 左右合并print(C)print(D)print(A[np.newaxis,:]) # 将一行序列变成一列的序列# 数组分割A = np.arange(12).reshape((3,4))print(np.split(A,3))print(np.vsplit(A,3))print(np.hsplit(A,2))","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"PyTorch基础","slug":"1、ZN-14","date":"02-01","updated":"02-01","comments":true,"path":"2020/02/01/1、ZN-14/","link":"","permalink":"https://liuchengblog.github.io/2020/02/01/1%E3%80%81ZN-14/","excerpt":"","text":"这是有关PyTorch的简单的笔记。由于缺少必要的解释，所以不适合自学自学还是建议好好看下书或者PyTorch的官网教学 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#!/usr/bin/env python# -*- coding:utf-8 -*-from __future__ import print_functionimport torchimport numpy as np# 利用torch创建的矩阵叫做Tensor张量# 创建5*3的0矩阵x = torch.empty(5 * 3)print(x)# 创建5*3的随机矩阵x = torch.randn(5, 3)print(x)# 创建5*3的0矩阵并指定类型x = torch.zeros(5, 3, dtype=torch.long)print(x)# 创建矩阵并指定数据x = torch.tensor([5.5, 3])print(x)# 从已有的张量创建张量x = torch.ones(5, 3, dtype=torch.double)print(x)x = torch.randn_like(x, dtype=torch.float)print(x)# 获取大小，返回的是个元组print(x.size())# 运算操作y = torch.rand(5, 3) # randn是从标准正态分布中返回值，rand是从[0,1)中返回值print(x + y)print(torch.add(x, y))y.add_(x)print(y)# 将运算结果赋给变量result = torch.add(x, y)print(result)# 也可以通过指定的方式赋给变量result = torch.empty(5, 3)torch.add(x, y, out=result)print(result)# 重造结构x = torch.randn(4, 4)y = x.view(16)z = x.view(-1, 8)print(x.size(), y.size(), z.size())# 获取值x = torch.randn(4, 4)print(x)print(x[0][0])x = torch.randn(1) # 当只有一个元素的时候可以直接item访问print(x)print(x.item())# Numpy Array和Torch Tensor的转换a = torch.ones(5)print(a)b = a.numpy()print(b)a.add_(1) # 这种方式是浅赋值，即a变化了b也会变# tensor中对自己的操作都有一个_print(a)print(b)a = np.ones(5)b = torch.from_numpy(a)np.add(a, 1, out=a)print(a)print(b)# 利用GUP来运算if torch.cuda.is_available(): device = torch.device(\"cuda\") # a CUDA device object y = torch.ones_like(x, device=device) # directly create a tensor on GPU x = x.to(device) # or just use strings ``.to(\"cuda\")`` z = x + y print(z) print(z.to(\"cpu\", torch.double)) # ``.to`` can also change dtype together!# input = input(\"Press &lt;enter&gt;\")","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Python基础⑨：标准库","slug":"1、ZN-12","date":"02-01","updated":"02-01","comments":true,"path":"2020/02/01/1、ZN-12/","link":"","permalink":"https://liuchengblog.github.io/2020/02/01/1%E3%80%81ZN-12/","excerpt":"","text":"1、time库：处理时间的标准库1）获取现在的时间 12345678import time # 要使用库就必须要引入# 获取本地时间，返回的时间的结构体，不是很直观t_local = time.localtime() # 获取UTC世界统一时间，返回的时间的结构体，不是很直观t_UTC = time.gmtime() # 这个方法返回本地时间的字符串，看起来就比较直观time.ctime() 2）时间戳与计时器 12345678910111213141516171819202122# 1. time.time() 返回自纪元以来的秒数，记录sleep# 2. time.perf_counter() 随机选取一个时间点，记录现在时间到该时间点的间隔秒数，记录sleep# 3. time.process_time() 随机选取一个时间点，记录现在时间到该时间点的间隔秒数，不记录sleep# 4. perf_counter()的精度比time()要高一点# 5. 将结束时间减去起始时间就是一个计时器了t_1_start = time.time()t_2_start = time.perf_counter()t_3_start = time.process_time()print(t_1_start)print(t_2_start)print(t_3_start)res = 0for i in range(10000000): re += 1time.sleep(5)t_1_end = time.time()t_2_end = time.perf_counter()t_3_end = time.process_time()print(\"time方法：&#123;:.3f&#125;秒\".format(t_1_end-t_1_start))print(\"perf_counter方法：&#123;:.3f&#125;秒\".format(t_2_end-t_2_start))print(\"process_time方法：&#123;:.3f&#125;秒\".format(t_3_end-t_3_start)) 3）格式化输出：time.strftime() 123lctime = time.localtime()time.strftime(\"%Y-%M-%d %A %H:%M:%S\", lctime)# 输出结果：'2019-08-29 Thursday 16:54:45' 4）睡觉函数：time.sleep(暂停运行的秒数) 2、random库：提供伪随机数1）随机种子：seed(a = None) 123456from random import *print(random()) # 如果不设置种子则以系统时间为默认值seed(10) # 相同种子产生的随机数相同print(random())seed(10)print(random()) 2）产生随机整数 1234567from random import *# randint(a,b)——产生[a,b]之间的随机整数numbers1 = [randint(1,10) for i in range(10)]# randrange(a)——产生[0,a)之间的随机整数numbers2 = [randrange(10) for i in range(10)]# randrange(a,b,step)——产生[a,b)之间以step为步长的随机整数numbers2 = [randrange(0,10,2) for i in range(10)] 3）产生随机浮点数 12345from random import *# random()——产生[0.0,1.0)之间的随机浮点数numbers4 = [random() for i in range(10)]# uniform(a,b)——产生[a,b]之间的随机浮点数numbers2 = [uniform(2.1,3.5) for i in range(10)] 4）序列用函数 123456789ls = ['win','lose','draw']# choice(seq)——从序列类型中随机返回一个元素choice(ls)# choices(seq, weights=None, k)——对序列进行k次重复采样，可设置权重choices(ls,[4,4,2],k = 10)# shuffle(seq)——将序列中元素随机排序shuffle(ls)# sample(seq,k)——从序列中随机选取k个元素sample(ls,2) 5）概率分布——以高斯分布为例 12numbers = gauss(0,1) # 两个参数分别为0和1的高斯分布res = [gauss(0,1) for i in range(100)] # 一次性生成多个","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Python基础⑦：文件读写、模块、包和库","slug":"1、ZN-10","date":"02-01","updated":"02-01","comments":true,"path":"2020/02/01/1、ZN-10/","link":"","permalink":"https://liuchengblog.github.io/2020/02/01/1%E3%80%81ZN-10/","excerpt":"","text":"1、文件的读写1）文件的打开&ensp;&ensp;① 格式 12with open(\"文件路径\",\"打开模式\", encoding = \"操作文件的字符编码\") as f: 对文件进行操作的代码块 &ensp;&ensp;② 例子 123with open(\"E:\\ipython\\测试文件.txt\",\"r\", encoding = \"gbk\") as f: # 第一步：打开文件 text = f.read() # 第二步：读取文件 print(text) &ensp;&ensp;③ 打开模式|模式字母| 模式作用 ||–|–|| r | 只读模式。缺省模式。如果文件不存在，报错 ||w| 覆盖写模式。如果文件不存在则创建；如果文件存在则完全覆盖原文件||x|创建写模式。如果文件不存在则创建；如果文件存在则报错||a|追加写模式。如果文件不存在则创建；如果文件存在则在原文件后追加||b|二进制文件模式。不能单独使用，要配合上面几个。该模式不需要指定encoding。||t|文本文件模式。不能单独使用，要配合上面几个。|&ensp;&ensp;④ 字符编码|编码类型| 编码特点 ||–|–|| 万国码 utf-8 | 包含全世界所有国家要用到的字符，也是python3的默认文件编码|统一编码 Unicode|python3中字符串默认的编码方式||中文编码 gbk| 缺省编码，专门解决中文编码的问题| 关于字符编码详细的内容可以参考这篇文章，这里对必要内容做点记录python3中，对字符串的编码使用的是Unicode的编码方式，但是整个源文件存储的时候采用的是utf-8的形式当我们要打开一个源文件程序时，系统将源文件的utf-8编码的内容，先用utf-8的方式解码成二进制，再用Unicode编码的方式编码，然后才能显示在屏幕上。这里要注意，我们用Windows10的记事本写东西默认是utf-8的方式编码存储，但Windows7默认的是ANSI的方式 2）文件的读取&ensp;&ensp;① 读取整个内容——f.read() 123with open(\"E:\\ipython\\测试文件.txt\",\"r\", encoding = \"utf-8\") as f: # 第一步：打开文件 text = f.read() # 第二步：读取文件 print(text) &ensp;&ensp;② 逐行读取——f.readline() 1234567with open(\"E:\\ipython\\测试文件.txt\",\"r\", encoding = \"utf-8\") as f: # 第一步：打开文件 while True： text = f.readline() # 第二步：读取文件，每次读取一行 if not text: break else: print(text,end=\"\") &ensp;&ensp;③ 逐行读取，每行形成一个列表——f.readlines() 123with open(\"E:\\ipython\\测试文件.txt\",\"r\", encoding = \"utf-8\") as f: # 第一步：打开文件 text = f.readlines() # 第二步：读取文件 print(text) 3）文件的写入&ensp;&ensp;① 向文件中写入字符串或字节流——f.write()&ensp;&ensp;要注意打开文件时的打开模式，是w还是a 12with open(\"E:\\ipython\\测试文件.txt\",\"w\", encoding = \"utf-8\") as f: # 第一步：打开文件 text = f.write(\"奥力给！\\n\") # 第二步：写入文件 &ensp;&ensp;② 将元素为字符串的列表写入——f.writelines() 123ls = [\"遇到困难不要害怕\\n\",\"勇敢的面对他\\n\",\"奥里给！\\n\"]with open(\"E:\\ipython\\测试文件.txt\",\"w\", encoding = \"utf-8\") as f: # 第一步：打开文件 text = f.writelines(ls) # 第二步：写入文件 4）既读既写——最常用的方式&ensp;&ensp;① f.seek(a,b)函数&ensp;&ensp;&ensp;&ensp;这个函数的作用的是将指针移到指定的地方。可以理解为平时打字时候的光标。&ensp;&ensp;&ensp;&ensp;函数的两个参数分别是：&ensp;&ensp;&ensp;&ensp;a：偏移字节数&ensp;&ensp;&ensp;&ensp;b：位置。可以是0，开始位置；1，当前位置；2，结尾位置&ensp;&ensp;&ensp;&ensp;比如：f.seek(2,0)的意思就是将指针移到开始位置后2个字节的地方。&ensp;&ensp;② r+模式&ensp;&ensp;&ensp;&ensp;如果文件不存在，则报错&ensp;&ensp;&ensp;&ensp;指针一开始指向开始的地方&ensp;&ensp;&ensp;&ensp;要把指针移到最后才能开始写，否则会覆盖前面的内容 123456with open(\"E:\\ipython\\测试文件.txt\",\"r+\", encoding = \"utf-8\") as f: # 第一步：打开文件 for line in f: print(line) # 全部读一遍之后，指针指向结尾 f.seek(0,2) # 将指针指向开头后两个字节处 text = [\"奥里给！\\n\",\"第二遍\\n\"] f.writelines(text) &ensp;&ensp;③ w+模式&ensp;&ensp;&ensp;&ensp;如果文件不存在，则创建&ensp;&ensp;&ensp;&ensp;如果文件存在，则会立刻清空原内容&ensp;&ensp;④ a+模式&ensp;&ensp;&ensp;&ensp;如果文件不存在，则创建&ensp;&ensp;&ensp;&ensp;指针在末尾，添加新内容不会清空原内容&ensp;&ensp;&ensp;&ensp;最常用这个 2、模块1）模块、包、库的区别&ensp;&ensp;&ensp;&ensp;模块：就是.py文件，里面定义了一些函数和变量。当我们在另一个.py文件中想使用前一个文件中的函数或变量时，我们就是从模块中调用。当然我们也可以自己写模块。&ensp;&ensp;&ensp;&ensp;包：是模块的上级概念。简单来说，就是“包”包含了许多模块和子包。包目录下的第一个文件便是init.py，然后是一些模块文件和子目录。例如子目录中也有init.py这个文件，那么它就是这个包的子包了。当然，当我们自己写好模块之后，也可以自己创建自己的包。实际上，想numpy等都是以包的形式发布的。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;库：是具有相关功能模块的集合。他和包有重合部分，但不是包的上级概念。实际上并不做特别的区分。2）自己写一个模块&ensp;&ensp;&ensp;&ensp;前面说到，一个模块其实就是我们平时写的东西。&ensp;&ensp;&ensp;&ensp;不同的是，为了模块更好的在其他文件中调用，需要在代码加上下面这行，并把不想调用时就运行的代码放入下面这句的代码块中：&ensp;&ensp;&ensp;&ensp;if __name__==&#39;__main__&#39;:&ensp;&ensp;&ensp;&ensp;具体的解释可以参考这篇文章，解释的很清楚。3）模块的导入&ensp;&ensp;① 导入整个模块——import 模块名 1234import time # 导入整个模块start = time.time() # 调用time模块中的time()方法time.sleep(3) # 调用time模块中的sleep()方式 &ensp;&ensp;② 从模块中导入类或函数——from 模块 import 类名或函数名 1234from itertools import productfrom function import fun1, fun2 # 一次导入多个函数ls = list(product(\"AB\",\"123\"))print(ls) &ensp;&ensp;③ 导入模块中所有的类和函数——from 模块 import * 1234from random import *# 这种方式可以直接使用函数名或类名，第一种方式要 模块名.函数名 这样子调用print(randint(1,100)print(random()) 4）模块的查找路径&ensp;&ensp;&ensp;&ensp;模块的查找顺序是：内存 → 内置模块 → sys.path中","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Python基础⑤：函数","slug":"1、ZN-08","date":"02-01","updated":"02-01","comments":true,"path":"2020/02/01/1、ZN-08/","link":"","permalink":"https://liuchengblog.github.io/2020/02/01/1%E3%80%81ZN-08/","excerpt":"","text":"1、函数的定义与调用1）函数的定义与调用：参数+函数体+返回值&ensp;&ensp;① 定义 12345678# 定义函数格式def 函数名(参数): 函数体 return 返回值# 例子：求正方形面积def area_of_square(length_of_side): square_area = pow(legth_of_side,2) return square_area &ensp;&ensp;② 调用 123456# 例子：求正方形面积def area_of_square(length_of_side): square_area = pow(legth_of_side,2) return square_area# 调用定义的函数area = area_of_square(5) 2）参数的传递&ensp;&ensp;① 位置参数：按照位置顺序用实参对形参赋值，实参形参个数一一对应 123def function(x,y,z): return x,y,zfunction(1,2,3) # x=1,y=2,z=3 &ensp;&ensp;② 关键字参数 1234567def function(x,y,z): return x,y,zfunction(y=1,z=2,x=3) # x=3,y=1,z=2# 两个可以混着用，但位置参数必须要在关键字参数前面def function(x,y,z): return x,y,zfunction(1,z=2,y=3) # x=1,y=3,z=2 &ensp;&ensp;③ 默认参数：在定义函数阶段就给形参赋值 12345# 默认参数应该设置为不可变类型（数字、字符串、元组）# 将z设为默认参数，值为3def function(x,y,z=3): return x,y,zfunction(y=1,x=3) # x=3,y=1,z=3 &ensp;&ensp;④ 可选参数：让参数变成可选的 1234567def name(first_name,last_name,middle,name = None): if middle_name: return first_name+middle_name+last_name else: return first_name+last_nameprint(name(\"Cheng\",\"Liu\")) # 结果是：\"ChengLiu\"print(name(\"Cheng\",\"Liu\",\"JR\")) # 结果是：\"ChengLiuJR\" &ensp;&ensp;⑤ 可变长参数 *args 123456def foo(x,y,z,*args): print(x,y,z) print(args)foo(1,2,3,4,5,6) # x=1,y=2,z=3，剩下打包成元组传给argsfoo(1,2,3,[4,5,6]) # x=1,y=2,z=3，剩下打包成元组传给argsfoo(1,2,3,*[4,5,6]) # x=1,y=2,z=3，剩下的打散后打包成元组给args &ensp;&ensp;⑥ 可变长参数 **kwargs 1234def foo(x,y,z,**kwargs): print(x,y,z) print(kwargs)foo(1,2,3,a=4,b=5,c=6) # x=1,y=2,z=3，剩下打包成字典传给args 3）函数体与变量作用域&ensp;&ensp;① 局部变量：在函数内部定义的变量，仅在函数内部起作用&ensp;&ensp;② 全局变量：在函数外部或使用global修饰的变量4）返回值&ensp;&ensp;① 单个返回值：就是用return返回&ensp;&ensp;② 多个返回值：通过元组的形式 1234def foo(x=1): return 1,x,x**2,x**3print(foo(3)) # (1,3,9,27)a,b,c,d = foo(3) # 解包赋值 2、匿名函数1）定义格式：lambda 变量:函数体2）常用用法&ensp;&ensp;① 列表排序sort() 123ls = [(93,88),(79,100),(86,71),(85,85),(76,94)]ls.sort(key = lambda x:x[1]) # 根据元组第2个元素排序ls.sort(key = lambda x:x[0]+x[1]) # 根据元组两个元素之和排序 &ensp;&ensp;② max()和min() 123ls = [(93,88),(79,100),(86,71),(85,85),(76,94)]n = max(ls,key = lambda x:x[1])m = min(ls, key = lambda x:x[1])","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Python基础⑧：异常处理","slug":"1、ZN-11","date":"02-01","updated":"02-01","comments":true,"path":"2020/02/01/1、ZN-11/","link":"","permalink":"https://liuchengblog.github.io/2020/02/01/1%E3%80%81ZN-11/","excerpt":"","text":"1、常见异常的产生1）除0运算——ZeroDivisionError2）找不到可读文件——FileNotFoundError3）值错误——ValueError4）索引错误——IndexError5）类型错误——TypeError6）变量名错误——NameError 2、异常的处理1）try_except&ensp;&ensp;① 单分支 123456x = 10y = 0try: z = x/yexcept ZeroDivisionError: print(\"0不能作除数\") &ensp;&ensp;② 多分支 12345678910ls = []d = &#123;\"name\":\"LC\"&#125;try: d[\"age\"]except NameError: print(\"变量名不存在\")except IndexError: print(\"索引超出界限\")except KeyError: print(\"键不存在\") &ensp;&ensp;③ 万能异常 Exception 123456ls = []d = &#123;\"name\":\"LC\"&#125;try: d[\"age\"]except Exception: print(\"出错了\") &ensp;&ensp;④ 捕获异常的值 as 1234567ls = []d = &#123;\"name\":\"LC\"&#125;try: y = m d[\"age\"]except Exception as e: # 获取错误的值 print(e) 2）try_except_else 1234567try: with open(\"try.txt\") as f: text = f.read()except FileNotFoundError: print(\"找不到文件\")else: print(\"找到了\") 3）try_except_finally：无论try模块是否执行，finally最后都会执行 12345678910ls = []d = &#123;\"name\":\"LC\"&#125;try: y = x ls[3] d[\"age\"]except Exception as e: # 获取错误的值 print(e)finally: print(\"执行finally\")","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Python基础⑥：类和对象","slug":"1、ZN-09","date":"02-01","updated":"02-01","comments":true,"path":"2020/02/01/1、ZN-09/","link":"","permalink":"https://liuchengblog.github.io/2020/02/01/1%E3%80%81ZN-09/","excerpt":"","text":"1、类的概念和结构1）类的概念&ensp;&ensp;&ensp;&ensp;和其他变成语言类似，python中的类是用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。而对象是类的实例。&ensp;&ensp;&ensp;&ensp;打个比方，人这个概念就是一个类。只要是人这个类，就都有一些属性（身高体重性别等）和方法（吃喝跑跳等）。&ensp;&ensp;&ensp;&ensp;再具体点，小红和小明都是人这个类的实例。小红和小明都有身高体重性别，也都会吃喝跑跳。但小红和小明身高体重性别的值肯定不同，吃喝跑跳的动作也肯定不同。2）类的定义和实例化 123456789101112131415161718192021222324#类定义class people: #定义基本属性 name = '' age = 0 #定义私有属性,私有属性在类外部无法直接进行访问 __weight = 0 #定义构造方法,该方法在类实例化时会自动调用 def __init__(self,n,a,w): self.name = n self.age = a self.__weight = w def speak(self): print(\"%s 说: 我 %d 岁。\" %(self.name,self.age)) # 实例化类XiaoHong = people('XiaoHong',16,35) # 通过构造方法给属性赋值XiaoMing = people('XiaoMing',18,65)# 访问属性print(XiaoHong.name)print(XiaoMing.age)# 调用实例的方法XiaoHong.speak()XiaoMing.speak() &ensp;&ensp;&ensp;&ensp;在上述代码中，类里面有一个特殊的方法init()，称为构造方法。在实例化对象时会首先执行这个方法，所以可以通过这个方法给对象的属性赋值。&ensp;&ensp;&ensp;&ensp;此外，类的方法与普通的函数有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。 2、类的继承1）类的继承 1234567891011121314151617181920212223242526272829#类定义class people: #定义基本属性 name = '' age = 0 #定义私有属性,私有属性在类外部无法直接进行访问 __weight = 0 #定义构造方法 def __init__(self,n,a,w): self.name = n self.age = a self.__weight = w def speak(self): print(\"%s 说: 我 %d 岁。\" %(self.name,self.age)) #单继承示例class student(people): grade = '' def __init__(self,n,a,w,g): #调用父类的构造函数 people.__init__(self,n,a,w) self.grade = g #覆写父类的方法 def speak(self): print(\"%s 说: 我 %d 岁了，我在读 %d 年级\"%(self.name,self.age,self.grade)) s = student('ken',10,60,3)s.speak() 2）类的多继承 123456789101112131415161718192021222324252627282930313233343536373839404142434445#类定义class people: #定义基本属性 name = '' age = 0 #定义私有属性,私有属性在类外部无法直接进行访问 __weight = 0 #定义构造方法 def __init__(self,n,a,w): self.name = n self.age = a self.__weight = w def speak(self): print(\"%s 说: 我 %d 岁。\" %(self.name,self.age)) #单继承示例class student(people): grade = '' def __init__(self,n,a,w,g): #调用父类的构函 people.__init__(self,n,a,w) self.grade = g #覆写父类的方法 def speak(self): print(\"%s 说: 我 %d 岁了，我在读 %d 年级\"%(self.name,self.age,self.grade)) #另一个类，多重继承之前的准备class speaker(): topic = '' name = '' def __init__(self,n,t): self.name = n self.topic = t def speak(self): print(\"我叫 %s，我是一个演说家，我演讲的主题是 %s\"%(self.name,self.topic)) #多重继承class sample(speaker,student): a ='' def __init__(self,n,a,w,g,t): student.__init__(self,n,a,w,g) speaker.__init__(self,n,t) test = sample(\"Tim\",25,80,4,\"Python\")test.speak() #方法名同，默认调用的是在括号中排前的父类的方法 3、方法重写1）重写父类中的方法 123456789101112class Parent: # 定义父类 def myMethod(self): print ('调用父类方法') class Child(Parent): # 定义子类 def myMethod(self): print ('调用子类方法') c = Child() # 子类实例c.myMethod() # 子类调用重写方法，结果是：调用子类方法# super函数是用于调用父类的一个方法super(Child,c).myMethod() #用子类对象调用父类已被覆盖的方法，结果是：调用父类方法 2）子类继承父类构造函数说明&ensp;&ensp;①子类不重写 __init__，实例化子类时，会自动调用父类定义的 __init__ 12345678910111213141516class Father(object): def __init__(self, name): self.name=name print ( \"name: %s\" %( self.name) ) def getName(self): return 'Father ' + self.name class Son(Father): def getName(self): return 'Son '+self.name son=Son('LC')print ( son.getName() )# 输出结果是# name: LC# Son LC &ensp;&ensp;②如果重写了__init__ 时，实例化子类，就不会调用父类已经定义的 __init__ 12345678910111213141516171819class Father(object): def __init__(self, name): self.name=name print ( \"name: %s\" %( self.name) ) def getName(self): return 'Father ' + self.name class Son(Father): def __init__(self, name): print ( \"hi\" ) self.name = name def getName(self): return 'Son '+self.name son=Son('LC')print ( son.getName() )# 输出结果是# hi# Son LC &ensp;&ensp;③如果重写了__init__时，要继承父类的构造方法，可以使用 super 关键字 123456789101112131415161718192021class Father(object): def __init__(self, name): self.name=name print ( \"name: %s\" %( self.name)) def getName(self): return 'Father ' + self.name class Son(Father): def __init__(self, name): super(Son, self).__init__(name) print (\"hi\") self.name = name def getName(self): return 'Son '+self.name son=Son('runoob')print ( son.getName() )# 输出结果是# name: LC# hi# Son LC 4、类的私有属性与私有方法&ensp;&ensp;&ensp;&ensp;之前说过，一个类中包含属性和方法。当实例化一个类后，可以通过 实例名.属性名 或实例名.方法名 的方式访问调用。&ensp;&ensp;&ensp;&ensp;此外，类中还会出现私有的属性和私有的方法。顾名思义就是只能在类内部使用的属性和方法。不能在类的外部被使用或直接访问。&ensp;&ensp;&ensp;&ensp;类的私有属性：两个下划线开头，在类内部的方法中使用时 self.private_attrs。&ensp;&ensp;&ensp;&ensp;类的私有方法：两个下划线开头，在类内部的方法中使用时 self.private_methods。 12345678910111213141516171819202122232425262728293031323334class JustCounter: __secretCount = 0 # 私有变量 publicCount = 0 # 公开变量 def count(self): self.__secretCount += 1 self.publicCount += 1 print (self.__secretCount)class Site: def __init__(self, name, url): self.name = name # 公开属性 self.__url = url # 私有属性 def who(self): print('name : ', self.name) print('url : ', self.__url) def __foo(self): # 私有方法 print('这是私有方法') def foo(self): # 公共方法 print('这是公共方法') self.__foo() counter = JustCounter()counter.count()counter.count()print (counter.publicCount)print (counter.__secretCount) # 报错，实例不能访问私有变量x = Site('LC', 'liuchengblog.github.io')x.who() # 正常输出x.foo() # 正常输出x.__foo() # 报错","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Python基础④：程序控制结构","slug":"1、ZN-06","date":"01-26","updated":"01-26","comments":true,"path":"2020/01/26/1、ZN-06/","link":"","permalink":"https://liuchengblog.github.io/2020/01/26/1%E3%80%81ZN-06/","excerpt":"","text":"1、分支结构–if语句1）分支语句模板 1234567if 条件: 代码块elif 条件: 代码块...else: 代码块 2）分支语句例子 12345678age = 18res = 0 # 变量初始化if age &gt;22: print('可以结婚了’）elif age&gt;30: print('赶紧结婚')else: print('再等等吧') 3）嵌套语句：if语句中有if 123456789age = eval(input(\"请输入年龄\"))if age &gt; 18: is_public_place = bool(eval(input(\"公共场合输入1，非公共场合输入0\"))) if not is_public_place: print(\"可以抽烟\") else: print(\"禁止抽烟\")else: print(\"禁止抽烟\") 2、遍历循环–for循环1）for循环模板 12for 元素 in 可迭代对象: # 可迭代对象包括列表/元组/字符串/字典 执行语句 2）for循环例子&ensp;&ensp;① 直接迭代 123graduates = (\"lilei\",\"hanmeimei\",\"Jim\")for graduate in graduates: print(\"Congratulations, \" + graduate) &ensp;&ensp;② 变换迭代 1234567891011students = &#123;201901:'小明',201902:'小红',201903:'小强'&#125;for k,v in students.items(): print(k,v)# 201901 小明# 201902 小红# 201903 小强for student in students: print(student)# 201901# 201902# 201903 &ensp;&ensp;③ range()对象 1234res = []for i in range(1,10,2): # 左闭右开，每个+2，1/3/5/7/9 res.append(i**2)print(res) # [1,9,25,49,81] 3）break和continue&ensp;&ensp;① break用于结束整个循环 123456789product_scores = [89,90,99,70,67,78,85,92,77,82]i = 0for score in product_scores: # 如果低于75的个数超过1个，则不合格 if score &lt; 75: i += 1 if i == 2: print(\"产品不合格\") break # 结束了整个循环，67后面的元素就遍历不到了 &ensp;&ensp;② continue用于结束本次循环 123456product_scores = [89,90,99,70,67,78,85,92,77,82]for i in range(len(product_scores)): # 如果低于75，输出警告 if product_scores[i]&gt;=75: continue print(\"第&#123;0&#125;个产品，分数为&#123;1&#125;,不合格\".format(i,product_scores[i])) 4）for与else的配合 12345678910product_scores = [89,90,99,70,67,78,85,92,77,82]i = 0for score in product_scores: if score &lt; 75: i += 1 if i == 2: print(\"产品不合格\") breakelse: # for遍历完之后，如果没有break，则运行else print(\"产品合格\") 3、无限循环–while循环1）while的一般格式 1234while 判断条件: 执行语句# 条件为真，执行语句# 条件为假，while循环结束 2）不用while因为实际在编程中，while写的语句都可以改成for循环，这里偷点懒，之后循环都用for就好。","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Python基础③：组合数据类型","slug":"1、ZN-05","date":"01-26","updated":"01-26","comments":true,"path":"2020/01/26/1、ZN-05/","link":"","permalink":"https://liuchengblog.github.io/2020/01/26/1%E3%80%81ZN-05/","excerpt":"","text":"1、列表1）列表的表达&ensp;&ensp;① 定义列表：ls1 = [&#39;Python&#39;, 1998,True,{version:3.7}]&ensp;&ensp;② 其他类型转成列表：ls2 = list(可迭代对象，例如元组、字符串、集合等)&ensp;&ensp;&ensp;&ensp;ls2 _1= list(&quot;人工智能牛逼&quot;) # 字符串转成列表&ensp;&ensp;&ensp;&ensp;ls2 _2= list((&#39;人&#39;,&#39;工&#39;,&#39;智&#39;,&#39;能&#39;,&#39;牛&#39;,&#39;逼&#39;)) # 元组转成列表&ensp;&ensp;&ensp;&ensp;ls2 _3= list({&#39;人&#39;,&#39;工&#39;,&#39;智&#39;,&#39;能&#39;,&#39;牛&#39;,&#39;逼&#39;}) # 集合转成列表2）列表的性质&ensp;&ensp;① 列表长度：len(ls)&ensp;&ensp;② 列表的索引：可以通过下标访问元素，有正反索引&ensp;&ensp;③ 列表的切片：变量名[开始位置:结束位置:切片位置]3）列表的操作函数&ensp;&ensp;① 列表的拼接：list1+list2&ensp;&ensp;&ensp;&ensp;ls1=[1,2]&ensp;&ensp;&ensp;&ensp;ls2=[3,4]&ensp;&ensp;&ensp;&ensp;ls3=ls1+ls2 # 结果是[1,2,3,4]&ensp;&ensp;② 求幂次方 pow(x,n)：a = pow(2,5) # 求2的5次方&ensp;&ensp;③ 四舍五入 round(x,n)：a = round(a,2) # a四舍五入保留2位小数&ensp;&ensp;④ 商和模运算 divmod(x,y)：divmod(13,5) # 相当于 (x//y,x%y)，更快一点&ensp;&ensp;⑤ 最大/最小值 max() min()&ensp;&ensp;⑥ 求和 sum(列表或元组)4）列表的操作方法&ensp;&ensp;① 增加元素&ensp;&ensp;&ensp;&ensp;ls1.append(&quot;python&quot;) # 在末尾增加元素&ensp;&ensp;&ensp;&ensp;ls1.insert(位置编号, 待增元素) # 在指定位置增加元素&ensp;&ensp;&ensp;&ensp;ls1.extend(ls2) # 在末尾增加另一个列表&ensp;&ensp;② 删除元素&ensp;&ensp;&ensp;&ensp;ls1.pop(待删元素的位置编号) # 指定位置删除元素元素，当参数缺省时删除最后一个元素&ensp;&ensp;&ensp;&ensp;ls1.remove(待删元素) # 删除指定元素&ensp;&ensp;③ 查找元素：列表.index(待查元素) # 返回待查元素在列表中的下标位置&ensp;&ensp;④ 修改元素：列表[位置下标] = 新值&ensp;&ensp;⑤ 列表复制&ensp;&ensp;&ensp;&ensp;ls2 = ls1.copy() # 浅拷贝&ensp;&ensp;&ensp;&ensp;ls2 = ls1[:] # 浅拷贝&ensp;&ensp;&ensp;&ensp;关于浅拷贝和深拷贝，以及背后的原理放到第9部分进行说明。&ensp;&ensp;&ensp;&ensp;这里只要记住列表复制用浅拷贝，不能直接ls2 = ls1。&ensp;&ensp;⑥ 列表排序：列表.sort() # 参数缺省递增排序，参数为-1为递减排序&ensp;&ensp;⑦ 列表翻转：列表.reverse() 2、元组1）元组的表达：name = (&#39;LC&#39;,18,True)2）元组的操作&ensp;&ensp;不支持元素的增删改，其他与列表完全一致3）元组的常见用处：打包与解包&ensp;&ensp;① 用在函数返回值上 1234def f1(x): return x**2,x**3print(f1(3)) # 返回结果：(9,27)print(type(f1(3))) # 返回结果：&lt;class 'tuple'&gt; &ensp;&ensp;② 用在列表打包上 123456789numbers = [201901,201902,201903]name = ['小明','小红','小强']list(zip(numbers,name))# 结果：[(201901,'小明'),(201902,'小红'),(201903,'小强')]for number,name in zip(numbers,name): print(number,name)# 201901 小明# 201902 小红# 201903 小强 3、字典1）字典的表达：stu = {201901:&#39;小明&#39;,201902:&#39;小红&#39;,201903:&#39;小强&#39;}2）字典的要求：键不能重复；键必须是不可变类型（数字/字符串/元组）3）字典的性质&ensp;&ensp;① 字典的长度/键值对的个数：len(stu)&ensp;&ensp;② 字典的索引：stu[201901] # 字典[键]的形式4）字典的操作方法&ensp;&ensp;① 增加键值对：字典[新键] = 新值&ensp;&ensp;② 删除键值对：字典.pop(键)&ensp;&ensp;③ 修改键值对：字典[键] = 新值&ensp;&ensp;④ get方法：stu.get(key,default) # 从字典stu中获取key对应的值，如果没有这个键则返回default&ensp;&ensp;⑤ key方法和value方法&ensp;&ensp;&ensp;&ensp;stu.key() # 获取字典中的键，返回类型是列表&ensp;&ensp;&ensp;&ensp;stu.value() # 获取字典中的值，返回类型是列表&ensp;&ensp;⑥ items方法及字典的遍历 1234567print(list(stu.items()))for k,v in stu.items(): print(k,v)# [(201901,'小明'),(201902,'小红'),(201903,'小强')]# 201901 小明# 201902 小红# 201903 小强 4、集合1）集合的表达：stu = {201901,&#39;小明&#39;,201902, &#39;小红&#39;,201903, &#39;小强&#39;}2）集合的运算&ensp;&ensp;① 交：jihe1 &amp; jihe2&ensp;&ensp;② 并：jihe1 | jihe2&ensp;&ensp;③ 非交：jihe1 ^ jihe2&ensp;&ensp;④ 在A不在B的元素：jihe1 - jihe23）集合的操作方法&ensp;&ensp;① 增加元素：stu.add(要增加的元素)&ensp;&ensp;② 删除元素：stu.remove(要删除的元素)","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Anaconda搭建人工智能与深度学习平台","slug":"1、ZN-07","date":"01-18","updated":"01-18","comments":true,"path":"2020/01/18/1、ZN-07/","link":"","permalink":"https://liuchengblog.github.io/2020/01/18/1%E3%80%81ZN-07/","excerpt":"","text":"使用的硬件软硬件环境：Windows10 + Anaconda + Pycharm Anaconda1）了解PythonPython可以理解成一个解释软件，可以将写的Python代码翻译给电脑执行。如果我们电脑中有装有Python的话，打开安装目录可以看到如下结构：&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;其中python.exe就是我们的解释器Lib文件夹用来存python的包，包括自带的包和第三方包。如果是第三方的包则存在Lib下的site-packages文件夹中总的来说，python中包括一个解释器和一个包集合问题是，python自己已经可以满足自己程序的所有过程，为什么还要用到anaconda呢？ 2）Anaconda的安装在解释为什么使用anaconda之前，我们先将anaconda装好先。Windows下的安装步骤可以参考这篇博客，这里不再赘述。安装完之后，最好改下镜像源，就是下载库的地址。这里使用清华大学的镜像源。我们打开cmd，输入conda config --set show_channel_urls yes然后文件管理器中进入C盘下的用户目录，找到.condarc文件，用记事本打开。然后删除原有的，粘贴如下内容就更改结束了： 1234567891011121314channels: - defaultsshow_channel_urls: truedefault_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/rcustom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud 另外，因为我是使用Windows平台的，所以这里有关Linux系统的操作都省略。 3）Anaconda的作用问题①：我们都有了python，为什么还要anaconda呢？&ensp;&ensp;&ensp;&ensp;这就要涉及环境的问题了。我们知道，python的优势就是可以引入很多的第三方的库和包。&ensp;&ensp;&ensp;&ensp;可是当我们编写不同的项目程序的时候，会有很多不同的库要引入。&ensp;&ensp;&ensp;&ensp;打个比方，我写爬虫程序，要用到requests包；我写神经网络，可能要用到PyTorch库。&ensp;&ensp;&ensp;&ensp;如果我电脑中没有anaconda，所有的包和库都要放在Lib文件夹中。&ensp;&ensp;&ensp;&ensp;在我跑爬虫程序时，不仅要将加载完全用不上的PyTorch库导致运行启动变慢，还可能在调用request包的时候发生错误。&ensp;&ensp;&ensp;&ensp;为了解决上述问题，Anaconda就出场了。问题②：anaconda怎么解决&ensp;&ensp;&ensp;&ensp;Anaconda可以理解成包含了Python的一个大包。&ensp;&ensp;&ensp;&ensp;这个包中除了Python，还包括一些其他常用的库，例如numpy和pandas。&ensp;&ensp;&ensp;&ensp;打开anaconda安装目录可以发现，anaconda的项目结构和python的极为类似。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;两个都有一个python.exe和Lib文件夹，分别是base环境下的解释器和包文件夹。&ensp;&ensp;&ensp;&ensp;anaconda解决上面问题的方法就是为每一个项目创建新的环境。&ensp;&ensp;&ensp;&ensp;每个新环境中都独自着有着自己的Lib文件夹，及有属于自己的包和库。&ensp;&ensp;&ensp;&ensp;这样子调用起来每个项目都有独立的环境，不会相互干扰。 4）创建Anaconda的虚拟环境&ensp;&ensp;&ensp;&ensp;在安装完anaconda之后，开始菜单中会有如下图的目录结构，点开框中的：&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;点开之后可以看到如下图的界面，然后点击左侧environment的标志：&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;可以看到，environment中有一个base的环境，这个就是我们刚刚看到的anaconda安装目录下的python.exe和Lib组成的基础环境。&ensp;&ensp;&ensp;&ensp;我们点击下面create按钮，然后输入环境名称abc并选择python版本之后，就创建好了一个新的虚拟环境。&ensp;&ensp;&ensp;&ensp;我们之后在路径..\\Anaconda3\\envs下可以看到创建的新环境文件夹&ensp;&ensp;&ensp;&ensp;进入文件夹后的内容如下：&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;可以看到，这个新建的环境就是一个完整的python环境目录。&ensp;&ensp;&ensp;&ensp;所以，anaconda所谓的创建虚拟环境其实就是安装了一个真实的python环境, 只不过我们可以用不同版本的解释器和不同的包环境去运行python脚本.&ensp;&ensp;&ensp;&ensp;此外，在anaconda navigator中，还可以在不同的环境下，下载不同的包库，这里留到后续再说。 Pycharm1）Pycharm的安装&ensp;&ensp;&ensp;&ensp;pycharm是一款python IDE，简单来说就是一个打代码的平台。&ensp;&ensp;&ensp;&ensp;pycharm的安装很简单，在官网下载安装包后一路next即可，这里不做赘述。 2）Pycharm中使用anaconda环境&ensp;&ensp;&ensp;&ensp;这里是一个重点。&ensp;&ensp;&ensp;&ensp;在安装完pycharm后，我们点击 Create New Project 新建一个项目。&ensp;&ensp;&ensp;&ensp;可以看到，除了要输入项目名称和保存的地址以外，下方还要选择使用的环境。按照下图操作。&ensp;&ensp;&ensp;&ensp;在弹出的界面设置如下操作&ensp;&ensp;&ensp;&ensp;然后在文件目录中选中刚刚创建的环境的python.exe，然后点击OK，就成功创建了一个项目。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; 第三方库的下载1）新环境的包&ensp;&ensp;&ensp;&ensp;到上面那步，我们通用的开放平台就搭建好了。&ensp;&ensp;&ensp;&ensp;但是我们前面说到，python的优势就是有庞大的第三方库。&ensp;&ensp;&ensp;&ensp;如果我们在anaconda navigator中查看新环境abc包含的库时，会发现相比base环境，abc少了很多库。 | &ensp;&ensp;&ensp;&ensp;就连base库中最基本的numpy库和pandas库都没有。&ensp;&ensp;&ensp;&ensp;这里说明我们需要自己下载要用到的库。&ensp;&ensp;&ensp;&ensp;下面以安装numpy库为例，介绍conda的环境中安装第三方库的方法。 2）安装numpy库&ensp;&ensp;&ensp;&ensp;在anaconda navigator中点开abc环境，按下面图片的顺序操作&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;等待安装完后，numpy库就安装成功了 问题解答1）Pycharm创建新项目时为什么不选 New environment&ensp;&ensp;&ensp;&ensp;在pycharm创建新项目的时候可以看到，除了有exist environment外，还有new environment。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;至于为什么不用，是因为我们已经在anaconda navigator中创建好了新的环境。&ensp;&ensp;&ensp;&ensp;其实在创建新项目的时候，也可以选用new environment来顺便创建新的环境。&ensp;&ensp;&ensp;&ensp;但由于还要自己设置路径不太方便，所以我个人习惯先在anaconda navigator中创建好环境并安装好需要的库。 2）为什么用conda environment不用virtual environment&ensp;&ensp;&ensp;&ensp;conda environment和virtual environment的目的其实都是为了划分出独立的运行环境。&ensp;&ensp;&ensp;&ensp;但是两个创建环境的逻辑不太一样。&ensp;&ensp;&ensp;&ensp;我个人理解virtual environment创建的虚拟环境是可以继承base环境中的库，即虚拟环境中对于base中已有的库并不会再次下载到自己的环境中。&ensp;&ensp;&ensp;&ensp;而conda environment在创建时，只有最基本的几个包且不继承base中的任何库。若想用到base中的库，则要在虚拟环境中再次下载安装多一个副本。例如上文中的numpy库，base中自带了numpy，但新环境abc中需要自己安装。 3）为什么用conda进行安装不用pip&ensp;&ensp;&ensp;&ensp;如果在网上搜索python搜索安装库的方法，大致有两种：conda安装和pip安装&ensp;&ensp;&ensp;&ensp;首先说下pip是什么：pip 是一个 Python 包管理工具，提供了对 Python 包的查找、下载、安装、卸载的功能。&ensp;&ensp;&ensp;&ensp;conda是什么：conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系。&ensp;&ensp;&ensp;&ensp;简单来说，pip就是个下载python包的工具，而conda则是个管python环境的工具。&ensp;&ensp;&ensp;&ensp;既然两个都能下载包，为什么选择conda呢？&ensp;&ensp;&ensp;&ensp;这个问题我想了很久，后来发现conda安装后，可以在anaconda navigator的列表中当前环境中的包有哪些。而用pip安装的包不能显示在anaconda navigator的列表中。所以为了方便，我个人选择了conda来安装需要的包。","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Python基础②：基本数据类型","slug":"1、ZN-04","date":"01-17","updated":"01-17","comments":true,"path":"2020/01/17/1、ZN-04/","link":"","permalink":"https://liuchengblog.github.io/2020/01/17/1%E3%80%81ZN-04/","excerpt":"","text":"1、数字类型1）数字类型的组成&ensp;&ensp;① 整数&ensp;&ensp;&ensp;&ensp;默认十进制&ensp;&ensp;&ensp;&ensp;二进制0b开头，八进制0o开头，十六进制0x开头&ensp;&ensp;&ensp;&ensp;十进制与其他进制的转换，输出结果为字符串类型&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; a=bin(16) # 转二进制&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; b=oct(16) # 转十进制&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; c=hex(16) # 转十六进制&ensp;&ensp;&ensp;&ensp;其他进制与十进制的转换，输出结果为整型&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; d=int(a,2) # 二进制转十进制&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; e=int(b,8) # 八进制转十进制&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; f=int(c,16) # 十六进制转十进制&ensp;&ensp;② 浮点数&ensp;&ensp;&ensp;&ensp;不确定小数问题&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; (0.1+0.2)==0.3的结果是false&ensp;&ensp;&ensp;&ensp;引起该问题的原因是因为部分小数不能用二进制完全表示&ensp;&ensp;③ 复数&ensp;&ensp;&ensp;&ensp;a+bj的形式&ensp;&ensp;&ensp;&ensp;当b=1时，这个1要显式写出2）数字运算操作符&ensp;&ensp;加减乘除 + - * /： (1+3-4*2)/5&ensp;&ensp;取反 -：x= -x&ensp;&ensp;乘方：2**3 # 代表2的3次方&ensp;&ensp;整数商 //：13//5 # 向下取整数&ensp;&ensp;模运算 %：13%5 # 取余数&ensp;&ensp;整数与浮点数运算结果都是浮点&ensp;&ensp;除法运算结果都是浮点数3）数字运算操作函数&ensp;&ensp;① 求绝对值 abs()：a = abs(-5)&ensp;&ensp;② 求幂次方 pow(x,n)：a = pow(2,5) # 求2的5次方&ensp;&ensp;③ 四舍五入 round(x,n)：a = round(a,2) # a四舍五入保留2位小数&ensp;&ensp;④ 商和模运算 divmod(x,y)：divmod(13,5) # 相当于 (x//y,x%y)，更快一点&ensp;&ensp;⑤ 最大/最小值 max() min()&ensp;&ensp;⑥ 求和 sum(列表或元组) 2、字符串类型1）字符串的表达：字符串中要用到引号，可以在前面加上转义符 \\2）字符串的性质&ensp;&ensp;① 字符串的索引：可以通过下标获取字符串中的字符&ensp;&ensp;&ensp;&ensp;正向索引：print(s[0])&ensp;&ensp;&ensp;&ensp;反向索引：print(s[-1]) # 倒数第一个字符&ensp;&ensp;② 字符串的切片：变量名[开始位置:结束位置:切片间隔]&ensp;&ensp;&ensp;&ensp;s = &#39;Python&#39;&ensp;&ensp;&ensp;&ensp;print(s[0:3:1]) # 结果是Pyt，切片是左闭右开&ensp;&ensp;&ensp;&ensp;print(s[:5:2]) # 结果是Pto，起始位置是0的话就可以省略&ensp;&ensp;&ensp;&ensp;print(s[1:]) # 结果是ython，起始位置是最后的话也可以省略3）字符串操作符&ensp;&ensp;① 拼接 +：将两个字符串进行拼接&ensp;&ensp;&ensp;&ensp;a=&#39;I love &#39;&ensp;&ensp;&ensp;&ensp;b=&#39;you&#39;&ensp;&ensp;&ensp;&ensp;print(a+b) # 结果是I love you&ensp;&ensp;② 用乘号成倍复制：复制字符串&ensp;&ensp;&ensp;&ensp;b=&#39;you&#39;&ensp;&ensp;&ensp;&ensp;print(b*3) # 结果是youyouyou&ensp;&ensp;③ 成员运算 in：判断是否是子集&ensp;&ensp;&ensp;&ensp;b=&#39;Peter, Paul and Mary&#39;&ensp;&ensp;&ensp;&ensp;&#39;Peter&#39; in b # 结果是True&ensp;&ensp;④ 遍历 in：遍历字符串字符&ensp;&ensp;&ensp;&ensp;for i in &#39;Python&#39;:&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;print(i)4）字符串处理函数&ensp;&ensp;① 字符串长度：len(字符串)&ensp;&ensp;② 字符编码：python使用的是Unicode编码5）字符串处理方法&ensp;&ensp;① 分割：字符串.split(分割字符)&ensp;&ensp;&ensp;&ensp;a=&#39;I love you&#39;&ensp;&ensp;&ensp;&ensp;print(a.split(&#39; &#39;))&ensp;&ensp;&ensp;&ensp;# 结果返回的是列表：[&#39;I&#39;, &#39;love&#39;,&#39;you&#39;]&ensp;&ensp;&ensp;&ensp;# 原字符串没有改变&ensp;&ensp;② 聚合：聚合字符.join(可迭代数据类型)&ensp;&ensp;&ensp;&ensp;a=&#39;12345&#39;&ensp;&ensp;&ensp;&ensp;b=&#39;[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;]&ensp;&ensp;&ensp;&ensp;a_join= &quot;.&quot;.join(a)&ensp;&ensp;&ensp;&ensp;b_join= &quot;*&quot;.join(b)&ensp;&ensp;&ensp;&ensp;print(a_join)&ensp;&ensp;&ensp;&ensp;print(b_join)&ensp;&ensp;&ensp;&ensp;# 结果：&#39;1.2.3.4.5&#39;&ensp;&ensp;&ensp;&ensp;# 结果：&#39;1*2*3*4*5&#39;&ensp;&ensp;③ 删除两端特定字符：字符串.strip(删除字符)&ensp;&ensp;④ 字符串替换：字符串.replace(“被替换”,”替换成”)&ensp;&ensp;⑤ 字符串替换：字符串.replace(“被替换”,”替换成”)&ensp;&ensp;⑥ 字符串统计：字符串.count(“要统计的字符串”)&ensp;&ensp;⑦ 字母大小写和首字母大写：字符串.upper()、字符串.lower()、字符串.title() 3、布尔类型1）逻辑运算的结果 123456a = 10print(a &gt; 8) # Trueprint(a == 12) # Falseprint(a &lt; 5) # Falseprint(any([False,1,0,None])) # True，any判断是否有True的print(all([False,1,0,None])) # False，all判断是否都是True的 2）指示条件 12345678910n = 2800while True: m = evla(\"请输入一个数字\") if m == n: print(\"你猜对了\") break # 跳出循环 elif m &gt; n: print(\"太大了\") else: print(\"太小了\") 4、类型判别及类型转换1）类型判别&ensp;&ensp;① type(变量)&ensp;&ensp;&ensp;&ensp;a=12345&ensp;&ensp;&ensp;&ensp;b=&#39;12345&#39;&ensp;&ensp;&ensp;&ensp;print(type(a))&ensp;&ensp;&ensp;&ensp;print(type(b))&ensp;&ensp;&ensp;&ensp;# &lt;class &#39;str&#39;&gt;&ensp;&ensp;&ensp;&ensp;# &lt;class &#39;int&#39;&gt;&ensp;&ensp;② isinstance(变量,预判类型)：判断变量是否为预判类型&ensp;&ensp;&ensp;&ensp;print(isinstance(a,int))&ensp;&ensp;③ isinstance(变量,预判类型)：判断变量是否为预判类型&ensp;&ensp;④ 字符串.isdigit()：判断字符串是否只含数字&ensp;&ensp;⑤ 字符串.isalpha()：判断字符串是否只含字母&ensp;&ensp;⑥ 字符串.isalnum()：判断字符串是否只含数字和字母2）类型转换&ensp;&ensp;① 数字类型转字符串：str(数字类型)&ensp;&ensp;&ensp;&ensp;age = 20&ensp;&ensp;&ensp;&ensp;str_age = str(age)&ensp;&ensp;② 仅有数字组成的字符串转成数字：int()、float()、eval()&ensp;&ensp;&ensp;&ensp;age = &quot;20.1&quot;&ensp;&ensp;&ensp;&ensp;int_age = int(age) # 只保留整数部分&ensp;&ensp;&ensp;&ensp;float_age = float(age)&ensp;&ensp;&ensp;&ensp;eval_age = eval(age)","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"Python基础","slug":"Python基础","permalink":"https://liuchengblog.github.io/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"Python基础①：基础语法元素","slug":"1、ZN-02","date":"01-16","updated":"01-16","comments":true,"path":"2020/01/16/1、ZN-02/","link":"","permalink":"https://liuchengblog.github.io/2020/01/16/1%E3%80%81ZN-02/","excerpt":"","text":"这一个小系列是python的一些基础内容，本意是用于笔记功能，所以很多地方没有解释，不太适合自学如果大家想自学的话，还是建议好好看书推荐《零基础入门学习Python》，这里面有材料和练习题+答案，建议好好看看 1、数据类型1）基本类型：数字、字符串、布尔值&ensp;&ensp;① 数字类型&ensp;&ensp;&ensp;&ensp;整形：2&ensp;&ensp;&ensp;&ensp;浮点型：2.0&ensp;&ensp;&ensp;&ensp;复数：2+3j&ensp;&ensp;② 字符串：用双引号” “包围的看作字符串&ensp;&ensp;&ensp;&ensp;例如 &quot;努巴尼真好吃”&ensp;&ensp;③ 布尔值2）组合类型：列表、元组、字典、集合&ensp;&ensp;① 列表：用[ , , ]包围的看作列表&ensp;&ensp;&ensp;&ensp;* 列表中元素有顺序&ensp;&ensp;&ensp;&ensp;* 通过下标访问列表元素&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a=[1,2,3]&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a[0]&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;输出的结果是1&ensp;&ensp;② 元组：用( , , )包围的看作元组&ensp;&ensp;&ensp;&ensp;* 元组中元素有顺序&ensp;&ensp;&ensp;&ensp;* 元组中的元素不能再修改&ensp;&ensp;&ensp;&ensp;* 通过下标访问元组元素&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a=(1,2,3)&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a[0]&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;输出的结果是1&ensp;&ensp;③ 字典：用{key1:value1,key2:value2}包围的看作字典&ensp;&ensp;&ensp;&ensp;* 字典中元素没有顺序，所以不能通过下标访问元素&ensp;&ensp;&ensp;&ensp;* 通过key访问元组元素&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;student={201901:‘Chris&#39;,201902:&#39;Mary&#39;}&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;student[201901]&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;输出的结果是’Chris’&ensp;&ensp;④ 集合：用{value1,value2}包围的看作集合&ensp;&ensp;&ensp;&ensp;* 集合中元素没有顺序，所以不能通过下标访问元素&ensp;&ensp;&ensp;&ensp;* 集合中元素不能重复&ensp;&ensp;&ensp;&ensp;* 通过key访问元组元素 2、变量1）定义：可变的对象；要有变量名+赋值2）变量的命名&ensp;&ensp;① 变量名：大小写字母、数字、下划线、汉字及其组合&ensp;&ensp;② 非法变量名：不能开头数字、变量名中间不能用空格&ensp;&ensp;③ 命名方法：&ensp;&ensp;&ensp;&ensp;变量和函数名由多个单词组成，用_连接&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;age_of_student=[17,18,19]&ensp;&ensp;&ensp;&ensp;类名用驼峰命名法，即单词首字母大写&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;AgeOfStudents&ensp;&ensp;&ensp;&ensp;常量所有字母都大写&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;MAXONE=1232）变量的赋值&ensp;&ensp;① 一般赋值&ensp;&ensp;&ensp;&ensp;x = 1+2+3&ensp;&ensp;② 增量赋值&ensp;&ensp;&ensp;&ensp;x += 10&ensp;&ensp;&ensp;&ensp;相当于x = x+10&ensp;&ensp;&ensp;&ensp;x -= 10&ensp;&ensp;&ensp;&ensp;相当于x = x-10&ensp;&ensp;③ 打包赋值&ensp;&ensp;&ensp;&ensp;x, y = 1, 2&ensp;&ensp;&ensp;&ensp;x, y = y, x # 实现数据互换 3、控制流程1）顺序流程：自上而下依次执行 12345678# 实现1到5整数求和res = 0 # 变量初始化res += 1res += 2res += 3res += 4res += 5res # 显示结果 2）for循环 12345# 实现1到5整数求和res = 0 # 变量初始化for i in [1,2,3,4,5]: # 每次循环从后面列表中取出一个元素赋值给i res += ires # 显示结果 3）while循环 1234567# 实现1到5整数求和i = 1res = 0 # 变量初始化while i &lt;= 5: # 若i不大于5，则循环继续 res += i i += 1res # 循环条件为假，则跳出循环，显示结果 3）if分支 12345678age = 18res = 0 # 变量初始化if age &gt;22: print('可以结婚了’）elif age&gt;30: print('赶紧结婚')else: print('再等等吧') 4、输入输出1）输入来源&ensp;&ensp;① 外部文件导入：这部分放到《文件、异常和模块》中&ensp;&ensp;② 程序中定义&ensp;&ensp;&ensp;&ensp;x, y = 1, 2&ensp;&ensp;&ensp;&ensp;z = 1+2+3&ensp;&ensp;&ensp;&ensp;name = &#39;Tom&#39;&ensp;&ensp;③ 动态互动输入&ensp;&ensp;&ensp;&ensp;x = input(&#39;请输入一个数字&#39;)&ensp;&ensp;&ensp;&ensp;* input得到的变量是字符串型，即x是字符串变量&ensp;&ensp;&ensp;&ensp;* 用eval()方法可以将字符串变成数据&ensp;&ensp;&ensp;&ensp;x = eval(input(&#39;请输入一个数字&#39;))2）输出来源&ensp;&ensp;① 存储到硬盘或网络段：这部分放到《文件、异常和模块》中&ensp;&ensp;② 打印输出print&ensp;&ensp;&ensp;&ensp;print(&#39;努巴尼真好吃&#39;) # 打印字符串&ensp;&ensp;&ensp;&ensp;print(1234）# 打印数据&ensp;&ensp;&ensp;&ensp;print(x) # 打印变量&ensp;&ensp;&ensp;&ensp;print(&quot;PI=&quot;,PI,&quot;E=&quot;,E) # 组合输出&ensp;&ensp;&ensp;&ensp;print(&quot;PI={0}&quot;,&quot;E={1}&quot;.format(PI,E)) # 格式化输出&ensp;&ensp;&ensp;&ensp;* print函数默认换行&ensp;&ensp;&ensp;&ensp;* 如果不想换行可以加上end&ensp;&ensp;&ensp;&ensp;print(x, end=&quot; &quot;) # 不换行打印 5、程序格式1）行最大长度：79个字符2）缩进：用缩进表示代码的从属关系3）用#进行单行注释4）用三个双引号扩起注释内容","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"Python基础","slug":"Python基础","permalink":"https://liuchengblog.github.io/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"数学基础①：高数线代与概率论基础","slug":"1、ZN-03","date":"01-16","updated":"01-16","comments":true,"path":"2020/01/16/1、ZN-03/","link":"","permalink":"https://liuchengblog.github.io/2020/01/16/1%E3%80%81ZN-03/","excerpt":"","text":"机器学习与人工智能目录：https://blog.csdn.net/weixin_38608322/article/details/90698199本文参考：https://study.163.com/course/courseMain.htm?courseId=1006185120QR原理可以参考：https://blog.csdn.net/shushi6969/article/details/7992108最大似然估计可以参考：https://blog.csdn.net/u014182497/article/details/82252456、","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"数学基础","slug":"数学基础","permalink":"https://liuchengblog.github.io/tags/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"}]},{"title":"Markdown学习笔记","slug":"3、ZT-01","date":"01-14","updated":"01-14","comments":true,"path":"2020/01/14/3、ZT-01/","link":"","permalink":"https://liuchengblog.github.io/2020/01/14/3%E3%80%81ZT-01/","excerpt":"","text":"1、使用工具这里我使用的markdown编辑器是MarkdownPad2。在网上可以很容易搜到安装包和安装教程。这个工具有直接提供许多的快捷按钮，就不用去记markdown的格式了。另外，使用该工具的插入图片功能还是要引用本地图片，自带的上传图片功能所使用的网站被墙了。 2、标题使用“#”标记标题可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推. 123456# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 3、段落文字1）字体： 123456*斜体文本* _斜体文本_ **粗体文本** __粗体文本__ ***粗斜体文本*** ___粗斜体文本___ 2）换行：在末尾添加两个空格+回车3）分割线：—4）删除线：拉拉5）下划线：带下划线文本 4、列表1）无序列表：使用星号(*)、加号(+)或是减号(-)作为列表标记 123* 第一项* 第二项* 第三项 2）有序列表：使用数字并加上 . 号来表示 1231. 第一项2. 第二项3. 第三项 3）列表嵌套：在子列表中的选项添加四个空格 1234561. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 5、区块引用在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号 12&gt; 肥宅的力量&gt; 拯救世界 6、代码1）片段：使用反引号把它包起来（`） 1`printf()` 函数 2）区块：用 ```包裹一段代码 7、链接12[链接名称](链接地址)例如： [LCB](https://liuchengblog.github.io) 8、图片markdown中的图片显示有三种方法 1234561）插入本地图片 ![alt 属性文本](本地图片地址) 2）插入网络图片 ![alt 属性文本](图片网址) 3）把图片存入markdown文件 用base64转码工具把图片转成一段字符串，然后填到链接的位置 123456# 利用python转化的代码import base64 f=open('723.png','rb') #二进制方式打开图文件 ls_f=base64.b64encode(f.read()) #读取文件内容，转换为base64编码 f.close() print(ls_f) 9、表格1）用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行 1234| 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 | 2）-: 设置内容和标题栏居右对齐、:- 设置内容和标题栏居左对齐、:-: 设置内容和标题栏居中对齐 1234| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |","categories":[{"name":"学习杂谈","slug":"学习杂谈","permalink":"https://liuchengblog.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"学习杂谈","slug":"学习杂谈","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/"},{"name":"Markdown","slug":"Markdown","permalink":"https://liuchengblog.github.io/tags/Markdown/"}]},{"title":"网站搭建","slug":"3、ZT-02","date":"01-14","updated":"01-14","comments":true,"path":"2020/01/14/3、ZT-02/","link":"","permalink":"https://liuchengblog.github.io/2020/01/14/3%E3%80%81ZT-02/","excerpt":"","text":"1、前期准备Windows10+Github+hexo搭建提前说下，我这个网站使用的主题来自Github上ZEROKISEKI对“忧郁的弟弟”网站的移植。因为个人兴趣很喜欢这个主题，十分感谢ZEROKISEKI的移植。下面附上源主题链接，大家可以去支持下。然后正式开始搭建个人博客网站。 2、git的下载与安装1）git和GitHub的关系以及为什么要用git&emsp;&emsp; git的专业名称叫做：分布式版本控制系统。&emsp;&emsp; Github简单来说就是个存放代码的仓库。&emsp;&emsp; 我们网站搭建完成后，肯定要进行一些改动，或是修改网页设计，或是添加删除文章等。git的作用相当于对每次进行修改的文件打上版本号，保证我们每次从仓库中读取的文件是最新的版本。2）git的下载&emsp;&emsp; 官网的链接、百度云链接 提取码: d63x3）git的安装与配置&emsp;&emsp; 安装没有什么好说的，一直狂点next，最后点击install就好。&emsp;&emsp; 安装好之后在桌面点击右键 Git Bash Here&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; 在打开的窗口中输入如下指令：ssh-keygen -t rsa&emsp;&emsp;&emsp;&emsp; 3、Node.js的下载与安装1）Node.js的下载和安装&emsp;&emsp; 官网的链接、百度云链接 提取码: wsti&emsp;&emsp; 安装也是一直狂点next就好2）更换国内镜像&emsp;&emsp; 以管理员身份运行命令提示符&emsp;&emsp; 输入如下命令： 123npm config set registry https://registry.npm.taobao.org npm config get registry //返回https://registry.npm.taobao.org，说明镜像配置成功。 npm install -g cnpm --registry=https://registry.npm.taobao.org 4、安装Hexo搭建Hexo博客1）安装Hexo&emsp;&emsp; 打开 git bash，输入如下命令：&emsp;&emsp; $ cnpm install -g hexo-cli2）搭建Hexo博客&emsp;&emsp; 在电脑上新建一个专门用来存放你的博客的文件夹，如 D:\\Test在该文件夹下 右键-git bash here，然后输入：&emsp;&emsp;&emsp;&emsp; hexo init&emsp;&emsp;&emsp;&emsp; hexo server&emsp;&emsp; 完成之后，浏览器访问 http://localhost:4000 ，即可看到hexo博客页面&emsp;&emsp;&emsp;&emsp; 5、Github上创建网站代码仓库1）创建仓库&emsp;&emsp; 在GitHub上创建以你的GitHub用户名（注意不是昵称）命名的项目，例如我的GitHub用户名为 LiuChengBlog 那么我就创建一个名字为：LiuChengBlog.github.io 的项目。&emsp;&emsp;&emsp;&emsp; 2）创建SSH连接&emsp;&emsp; 打开Github的设置界面，依次点击SSH and GPG keys和New SSH Key&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; 然后用记事本打开如图路径下的 id_rsa.pub 文件&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; 将记事本中的全部内容复制到刚刚打开的SSH Keys的界面中，再点Add SSH key&emsp;&emsp;&emsp;&emsp; 3）复制仓库地址&emsp;&emsp; 创建好仓库后点开仓库，复制如图中的仓库地址&emsp;&emsp;&emsp;&emsp; 6、配置Hexo&emsp;&emsp; 打开刚才新建的Test文件夹，用记事本打开_config.yml配置文件，找到deploy，进行如下配置，完成保存。注意格式不能错。 1234deploy: type: git repository: https://github.com/qiuyeyijian/ qiuyeyijian.github.io.git //将地址换成自己的 branch: master &emsp;&emsp; 然后在Test文件夹下打开Git Bash，输入如下命令： 123npm install hexo-deployer-git –savehexo g //（本地生成静态文件）hexo d //（将本地静态文件推送至Github） &emsp;&emsp; 在Test文件夹下的Git Bash中，输入如下命令下载主题，这里以我这个用的主题为例 1$ git clone https://github.com/ZEROKISEKI/hexo-theme-gal themes/gal &emsp;&emsp; 然后找到博客根目录下的config.yml配置文件中的theme属性，将其设置为gal&emsp;&emsp; 在根目录下的config.yml配置文件中添加如下的代码 123456789101112131415161718192021jsonContent: dateFormat: MM-DD pages: title: true text: true path: true date: true excerpt: true preview: true posts: title: true text: true path: true date: true excerpt: true tags: [&#123; name: tag.name, slug: tag.slug, permalink: tag.permalink &#125;] preview: true &emsp;&emsp; 在Test文件夹下的Git Bash中，输入如下命令 123456npm install hexo-renderer-sass --save npm install hexo-generator-json-content --savehexo new page \"search\" // 搜索功能的必须步骤hexo new page \"404\" // 开启404页面hexo new page \"tags\" // 开启标签功能hexo new page \"categories\" // 开启分类功能 &emsp;&emsp; 最后再次输入如下命令 12hexo g //（本地生成静态文件）hexo d //（将本地静态文件推送至Github） 7、结束至此，基础的设置都已经结束，现在打开你的网址应该就可以看到网页了例如我自己创建的，就输入： liuchengblog.github.io","categories":[{"name":"学习杂谈","slug":"学习杂谈","permalink":"https://liuchengblog.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"学习杂谈","slug":"学习杂谈","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/"},{"name":"网站搭建","slug":"网站搭建","permalink":"https://liuchengblog.github.io/tags/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"}]},{"title":"日常英语：How to refuse politely","slug":"2、YY-01","date":"01-14","updated":"01-14","comments":true,"path":"2020/01/14/2、YY-01/","link":"","permalink":"https://liuchengblog.github.io/2020/01/14/2%E3%80%81YY-01/","excerpt":"","text":"引言针对日常生活中别人邀请你去玩、赠与礼物、邀请约会等情况，礼貌的拒绝别人的方式。 1. Vocabulary 单词 音标 释义 awkward /ˈɔːkwərd/ difficult or causing problems brochure /broʊˈʃʊr/ a thin book with pictures and information, usually advertising something. 10 pages or less. pamphlet /ˈpæmflət/ a thin book with 2-4 pages tract/ leaflet /trækt/ /ˈliːflət/ 1-2 pages, just one sheet of paper folded catalogue /ˈkætəlɔːɡ/ a big book with many pages. Usually showing all the items that a company sells reasonable /ˈriːznəbl/ fair and showing good judgment stretch /stretʃ/ to require someone to use a lot of effort, ability, skills, etc., to succeed basis /ˈbeɪsɪs/ a situation, fact, or idea from which something can develop 2. Phrases 词组 例句 stretch the rules Normally we only allow people 18 or over into the club, but since you 18th birthday is tomorrow, I think we can stretch the rules and let you in. 3. Conversation1) 拒绝邀请去玩Jim: Hey Frank! I know it’s only Wednesday, but Casey’s Bar is having a great happy hour! You should come with us! Frank: Ah Jim, I don’t know, tomorrow’s one of the busiest days of the month at work. I need to keep my mind sharp, get to bed at a reasonable time. Jim: Oh come on, all the guys are going! Frank: I appreciate it Jim, but I’m going to have to take a rain check. Next time! 2) 拒绝别人的慷慨Kat: Hey Laura! I’m just calling to thank you for the gift you sent me! you’re too sweet sometimes. Laura: It’s my pleasure! I got another surprise for you too, just picked it up last night. Kat: You know, you’ve been spending too much on me lately! I know these gifts weren’t cheap, and I know you’re on a tight budget these days. Laura: Don’t worry about it. You’re my best friend, so I don’t mind stretch for you all. Kat: Well, that’s the thing, Laura. I appreciate everything so much, but friendship shouldn’t be based on stuff. I’d be your friend no matter what. But when you buy me so many things, I feel like it’s becoming the basis of our relationship. Laura: Wow, I never really thought of it that way. But I think you’re right! I feel like I’ve already set the bar so high, and now I almost feel bad when I don’t have something new for you! Kat ： Exactly, and then I feel bad that I can’t return the favor! Why don’t we cut back on gift-giving, and focus more on just being a good friend to each other? Laura: That sounds good. 3) 拒绝约会邀请Jake: Hey, it’s Heather, right? My name’s Jake! Heather: Oh, hi Jake. How are you? Jake: I’m good! Hey, I’ve seen you around the school and just really wanted to meet you. You seem like a cool girl. Heather: Well, that’s sweet of you! Yeah, nice to meet you. Jake: So anyway. I have these concert tickets for Friday night, it’s a great band. So I was wondering if you’d want to come with me. Maybe we could get dinner afterward. Heather: Aw, that’s nice of you Jake! I don’t think I can make it though… Jake: Why? Are you busy that night? Maybe Saturday, we can go out then. Heather： No, it’s not that. I guess I’m just not looking for anything right now. You seem nice, but I don’t think I’d be comfortable with dating. I hope you understand. Jake: Aw… that sucks. But yeah, that’s okay. I guess I’ll just see you around then? Heather: That sounds cool. Thanks for being understanding. 4) 拒绝推销Jack: Brookstone Publishing, Jack speaking. Jill: Hi Jack. My name is Jill from Scranton Paper Suppliers and I was hoping I counld just have a minute of your time to tell you about an exculsive special we’re running on our paper products for a limited time. Jack: Ah, thanks Jill but we’re happy with our current paper suppliers. Jill: I completely understand, sir. But if you just review our new pricing, I think you’d be pretty impressed. Jack: I’m really sorry Jill, but right now, we don’t need it. Maybe you could send me some brochures and I’ll take a look when I have time. Jill: Allright sir. I’d be happy to send you our catalog! Jack: Got it. Here’s the address of my office…","categories":[{"name":"英语学习","slug":"英语学习","permalink":"https://liuchengblog.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"日常英语","slug":"日常英语","permalink":"https://liuchengblog.github.io/tags/%E6%97%A5%E5%B8%B8%E8%8B%B1%E8%AF%AD/"},{"name":"口语积累","slug":"口语积累","permalink":"https://liuchengblog.github.io/tags/%E5%8F%A3%E8%AF%AD%E7%A7%AF%E7%B4%AF/"}]},{"title":"日常英语：Food terms","slug":"2、YY-03","date":"01-14","updated":"01-14","comments":true,"path":"2020/01/14/2、YY-03/","link":"","permalink":"https://liuchengblog.github.io/2020/01/14/2%E3%80%81YY-03/","excerpt":"","text":"引言餐厅中，食物的名称、点餐等知识 1. Vocabulary 单词 音标 释义 Pizza /ˈpiːtsə/ 比萨饼 slider /ˈslaɪdər/ 小三明治、小汉堡包 steak /steɪk/ 牛排；肉排；鱼排 Pasta /ˈpɑːstə/ 意大利面食（统称） spaghetti /spəˈɡeti/ 意大利式细面条 lasagna /ləˈsɑnjə/ 烤宽面条、千层面 linguini /liŋ’ɡwi:ni:/ 扁面条 Fried Food /fraɪd/ /fuːd/ 油炸食品（统称） tot /tɑːt/ 油炸薯饼 chips /tʃɪps/ 薯片 waffle chips /ˈwɑːfl/ /tʃɪps/ 薯格 curly fries /ˈkɜːrli/ /fraɪs/ 卷型薯条 fries /fraɪs/ 薯条 sweet potato fries 红薯条 单词 音标 释义 buffet /bəˈfe/ 自助餐 casual dining /ˈkæʒuəl/ /‘daɪnɪŋ/ 休闲餐饮 Food truck /fuːd/ /trʌk/ 流动餐车 fine dining /faɪn/ /‘daɪnɪŋ/ 正式餐厅（要穿正式点） 2. Sentences 词组 例句 I will have/ take… I will have the steak 词组 例句 – – I don’t think… I don’t think this is my order. ## 3. Pronunciation skills：can和can’t的区别 词组 读法 – – I can do it. do升调重度 I can’t do it… can’t升调重度","categories":[{"name":"英语学习","slug":"英语学习","permalink":"https://liuchengblog.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"日常英语","slug":"日常英语","permalink":"https://liuchengblog.github.io/tags/%E6%97%A5%E5%B8%B8%E8%8B%B1%E8%AF%AD/"},{"name":"口语积累","slug":"口语积累","permalink":"https://liuchengblog.github.io/tags/%E5%8F%A3%E8%AF%AD%E7%A7%AF%E7%B4%AF/"}]},{"title":"日常英语：Job interview","slug":"2、YY-05","date":"01-14","updated":"01-14","comments":true,"path":"2020/01/14/2、YY-05/","link":"","permalink":"https://liuchengblog.github.io/2020/01/14/2%E3%80%81YY-05/","excerpt":"","text":"引言在面试时自我介绍的方式，常见的四个面试问题的回答 1. Self-introduction1）Good morning, I am xxx. I obtained my master in computer science in XX University.（亮出你出色的教育背景）一 10 秒2）I have outstanding skills in programming. During my internship at XX company, I used my skills to increase the working efficiency of the company by 30%.（亮出你突出的实习表现）一 20 秒3）The reason I applied for this position is that I’m really impressed by your rapid development as a startup and I totally agree with your human-oriented concept.（表示赞成企业文化和埋念）—— 2 秒4）As a very self-motivated person, I’m sure I can be a great asset to your group.（表达想加入的意思）—— 10 秒 2. Questions and answers1）Do you have any working experience?回答模板：行业+职业+年份例子：Yes, I’ve been working in the online education sector as an operation manager for 5 years. 2）What do you think about your personality?回答模板：形容词+举例例子：I am an open-minded person and I’m always energetic and enthusiastic. For example, …. 3）Why did you choose to apply for this job?回答模板：它+你+我例子：The position is both challenging and interesting. It can make use of my professional experience. This job will offer me an opportunity to advancement. 4）What would you like to achieve in life?例子：My long-time career goal is to be the best technician in this field.","categories":[{"name":"英语学习","slug":"英语学习","permalink":"https://liuchengblog.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"日常英语","slug":"日常英语","permalink":"https://liuchengblog.github.io/tags/%E6%97%A5%E5%B8%B8%E8%8B%B1%E8%AF%AD/"},{"name":"口语积累","slug":"口语积累","permalink":"https://liuchengblog.github.io/tags/%E5%8F%A3%E8%AF%AD%E7%A7%AF%E7%B4%AF/"}]},{"title":"日常英语：start and continue a conversation in a party","slug":"2、YY-04","date":"01-14","updated":"01-14","comments":true,"path":"2020/01/14/2、YY-04/","link":"","permalink":"https://liuchengblog.github.io/2020/01/14/2%E3%80%81YY-04/","excerpt":"","text":"引言聚会中和朋友开启一个话题并继续聊天的方式 1. 开启话题 2. 继续话题1）Do you know where XXX is?2）Where are you from?3）I like your XXX. Where did you get it?4）That looks good. What is that?","categories":[{"name":"英语学习","slug":"英语学习","permalink":"https://liuchengblog.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"日常英语","slug":"日常英语","permalink":"https://liuchengblog.github.io/tags/%E6%97%A5%E5%B8%B8%E8%8B%B1%E8%AF%AD/"},{"name":"口语积累","slug":"口语积累","permalink":"https://liuchengblog.github.io/tags/%E5%8F%A3%E8%AF%AD%E7%A7%AF%E7%B4%AF/"}]},{"title":"日常英语：When taking a plane","slug":"2、YY-02","date":"01-14","updated":"01-14","comments":true,"path":"2020/01/14/2、YY-02/","link":"","permalink":"https://liuchengblog.github.io/2020/01/14/2%E3%80%81YY-02/","excerpt":"","text":"引言当我们坐飞机出游时，可能遇到的单词与表达 1. Vocabulary 单词 音标 释义 Boarding Pass /ˈbɔːrdɪŋ/ /pæs/ 登机牌 Class /klæs/ 舱位等级 flight number /flaɪt/ /ˈnʌmbər/ 航班号 Date of flight /deɪt/ /ʌv/ /flaɪt/ 航班时间 Gate /ɡeɪt/ 登机口 seat /siːt/ 座位号 Boarding time /ˈbɔːrdɪŋ/ /taɪm/ 登机时间 例子：下面这张登机牌重要的信息如下 ECONOMY CLASS：经济舱 CX138：航班号 11NOV：飞行日期 GATE 31：31号登机口 SEAT 64E：64E号作为 21:55：登机最晚时间 单词 音标 释义 – – – Appetizer /ˈæpɪtaɪzər/ 开胃菜 Airlines Food /‘ɛr,laɪn/ /fuːd/ 飞机餐 Main Course /meɪn/ /kɔːrs/ 主食 Dessert /dɪˈzɜːrt/ 甜点 Bread &amp; Bun /bred/ /bʌn/ 面包和小圆面包 Drinks /drɪŋks/ 饮料 Coffee &amp; Tea /ˈkɔːfi/ /tiː/ 咖啡和茶 单词 音标 释义 Blanket /ˈblæŋkɪt/ 毛毯 Pillow /ˈpɪloʊ/ 枕头 newspaper /ˈnuːzpeɪpər/ 报纸 magazine /ˈmæɡəziːn/ 杂志 headset /ˈhedset/ 耳机 2. Sentences 词组 例句 Would you mind… Would you mind helping me put up my baggage? 词组 例句 – – Excuse me, may I… Excuse me, may I have a blanket? 3. Pronunciation skills：元音和元音之间的连读两个元音音标之间需要用半元音 w /wu/ 或 j /je/ 连接这两个都要轻读 例子1：May 和 I 的音标分别是 /meɪ/ 和 /aɪ/。则 May 和 I 的发音之间要加上个 j 的音。 例子2：How are you 中 How 和 are 的音标分别是 /haʊ/ 和 /ɑr/。则 How 和 are 的发音之间要加上个 w 的音。","categories":[{"name":"英语学习","slug":"英语学习","permalink":"https://liuchengblog.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"日常英语","slug":"日常英语","permalink":"https://liuchengblog.github.io/tags/%E6%97%A5%E5%B8%B8%E8%8B%B1%E8%AF%AD/"},{"name":"口语积累","slug":"口语积累","permalink":"https://liuchengblog.github.io/tags/%E5%8F%A3%E8%AF%AD%E7%A7%AF%E7%B4%AF/"}]}]}