{"meta":{"title":"LiuChengBlog","subtitle":"","description":"","author":"Liu Cheng","url":"https://liuchengblog.github.io","root":"/"},"pages":[{"title":"404","date":"01-08","updated":"01-08","comments":true,"path":"404/index.html","permalink":"https://liuchengblog.github.io/404/index.html","excerpt":"","text":""},{"title":"search","date":"01-08","updated":"01-08","comments":true,"path":"search/index.html","permalink":"https://liuchengblog.github.io/search/index.html","excerpt":"","text":""},{"title":"分类","date":"01-13","updated":"01-13","comments":true,"path":"categories/index.html","permalink":"https://liuchengblog.github.io/categories/index.html","excerpt":"","text":"人工智能学习"},{"title":"我是谁？","date":"01-13","updated":"01-13","comments":true,"path":"about/index.html","permalink":"https://liuchengblog.github.io/about/index.html","excerpt":"","text":"20岁肥宅一名，梦想变成肌肉猛汉！ 目前努力学习人工智能方向的知识，所以自己搞了网站记录学习的过程 还有在自学英语，梦想成为带语言家 站中有自己整理的学习笔记、英语笔记、在学习编程中遇到的问题和心得 可能还有一些肥宅快乐资源 希望能和大家共同进步 也欢迎访问我的其他个人账号：CSDN、bilibili、Github"},{"title":"tags","date":"01-13","updated":"01-13","comments":true,"path":"tags/index.html","permalink":"https://liuchengblog.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python基础②：基本数据类型","slug":"1、ZN-04","date":"01-17","updated":"01-17","comments":true,"path":"2020/01/17/1、ZN-04/","link":"","permalink":"https://liuchengblog.github.io/2020/01/17/1%E3%80%81ZN-04/","excerpt":"","text":"1、数字类型1）数字类型的组成&ensp;&ensp;① 整数&ensp;&ensp;&ensp;&ensp;默认十进制&ensp;&ensp;&ensp;&ensp;二进制0b开头，八进制0o开头，十六进制0x开头&ensp;&ensp;&ensp;&ensp;十进制与其他进制的转换，输出结果为字符串类型&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; a=bin(16) # 转二进制&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; b=oct(16) # 转十进制&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; c=hex(16) # 转十六进制&ensp;&ensp;&ensp;&ensp;其他进制与十进制的转换，输出结果为整型&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; d=int(a,2) # 二进制转十进制&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; e=int(b,8) # 八进制转十进制&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; f=int(c,16) # 十六进制转十进制&ensp;&ensp;② 浮点数&ensp;&ensp;&ensp;&ensp;不确定小数问题&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; (0.1+0.2)==0.3的结果是false&ensp;&ensp;&ensp;&ensp;引起该问题的原因是因为部分小数不能用二进制完全表示&ensp;&ensp;③ 复数&ensp;&ensp;&ensp;&ensp;a+bj的形式&ensp;&ensp;&ensp;&ensp;当b=1时，这个1要显式写出2）数字运算操作符&ensp;&ensp;加减乘除 + - * /： (1+3-4*2)/5&ensp;&ensp;取反 -：x= -x&ensp;&ensp;乘方：2**3 # 代表2的3次方&ensp;&ensp;整数商 //：13//5 # 向下取整数&ensp;&ensp;模运算 %：13%5 # 取余数&ensp;&ensp;整数与浮点数运算结果都是浮点&ensp;&ensp;除法运算结果都是浮点数3）数字运算操作函数&ensp;&ensp;① 求绝对值 abs()：a = abs(-5)&ensp;&ensp;② 求幂次方 pow(x,n)：a = pow(2,5) # 求2的5次方&ensp;&ensp;③ 四舍五入 round(x,n)：a = round(a,2) # a四舍五入保留2位小数&ensp;&ensp;④ 商和模运算 divmod(x,y)：divmod(13,5) # 相当于 (x//y,x%y)，更快一点&ensp;&ensp;⑤ 最大/最小值 max() min()&ensp;&ensp;⑥ 求和 sum(列表或元组) 2、字符串类型1）字符串的表达：字符串中要用到引号，可以在前面加上转义符 \\2）字符串的性质&ensp;&ensp;① 字符串的索引：可以通过下标获取字符串中的字符&ensp;&ensp;&ensp;&ensp;正向索引：print(s[0])&ensp;&ensp;&ensp;&ensp;反向索引：print(s[-1]) # 倒数第一个字符&ensp;&ensp;② 字符串的切片：变量名[开始位置:结束位置:切片间隔]&ensp;&ensp;&ensp;&ensp;s = &#39;Python&#39;&ensp;&ensp;&ensp;&ensp;print(s[0:3:1]) # 结果是Pyt，切片是左闭右开&ensp;&ensp;&ensp;&ensp;print(s[:5:2]) # 结果是Pto，起始位置是0的话就可以省略&ensp;&ensp;&ensp;&ensp;print(s[1:]) # 结果是ython，起始位置是最后的话也可以省略3）字符串操作符&ensp;&ensp;① 拼接 +：将两个字符串进行拼接&ensp;&ensp;&ensp;&ensp;a=&#39;I love &#39;&ensp;&ensp;&ensp;&ensp;b=&#39;you&#39;&ensp;&ensp;&ensp;&ensp;print(a+b) # 结果是I love you&ensp;&ensp;② 用乘号成倍复制：复制字符串&ensp;&ensp;&ensp;&ensp;b=&#39;you&#39;&ensp;&ensp;&ensp;&ensp;print(b*3) # 结果是youyouyou&ensp;&ensp;③ 成员运算 in：判断是否是子集&ensp;&ensp;&ensp;&ensp;b=&#39;Peter, Paul and Mary&#39;&ensp;&ensp;&ensp;&ensp;&#39;Peter&#39; in b # 结果是True&ensp;&ensp;④ 遍历 in：遍历字符串字符&ensp;&ensp;&ensp;&ensp;for i in &#39;Python&#39;:&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;print(i)4）字符串处理函数&ensp;&ensp;① 字符串长度：len(字符串)&ensp;&ensp;② 字符编码：python使用的是Unicode编码5）字符串处理方法&ensp;&ensp;① 分割：字符串.split(分割字符)&ensp;&ensp;&ensp;&ensp;a=&#39;I love you&#39;&ensp;&ensp;&ensp;&ensp;print(a.split(&#39; &#39;))&ensp;&ensp;&ensp;&ensp;# 结果返回的是列表：[&#39;I&#39;, &#39;love&#39;,&#39;you&#39;]&ensp;&ensp;&ensp;&ensp;# 原字符串没有改变&ensp;&ensp;② 聚合：聚合字符.join(可迭代数据类型)&ensp;&ensp;&ensp;&ensp;a=&#39;12345&#39;&ensp;&ensp;&ensp;&ensp;b=&#39;[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;]&ensp;&ensp;&ensp;&ensp;a_join= &quot;.&quot;.join(a)&ensp;&ensp;&ensp;&ensp;b_join= &quot;*&quot;.join(b)&ensp;&ensp;&ensp;&ensp;print(a_join)&ensp;&ensp;&ensp;&ensp;print(b_join)&ensp;&ensp;&ensp;&ensp;# 结果：&#39;1.2.3.4.5&#39;&ensp;&ensp;&ensp;&ensp;# 结果：&#39;1*2*3*4*5&#39;&ensp;&ensp;③ 删除两端特定字符：字符串.strip(删除字符)&ensp;&ensp;④ 字符串替换：字符串.replace(“被替换”,”替换成”)&ensp;&ensp;⑤ 字符串替换：字符串.replace(“被替换”,”替换成”)&ensp;&ensp;⑥ 字符串统计：字符串.count(“要统计的字符串”)&ensp;&ensp;⑦ 字母大小写和首字母大写：字符串.upper()、字符串.lower()、字符串.title() 3、布尔类型1）逻辑运算的结果 123456a = 10print(a &gt; 8) # Trueprint(a == 12) # Falseprint(a &lt; 5) # Falseprint(any([False,1,0,None])) # True，any判断是否有True的print(all([False,1,0,None])) # False，all判断是否都是True的 2）指示条件 12345678910n = 2800while True: m = evla(\"请输入一个数字\") if m == n: print(\"你猜对了\") break # 跳出循环 elif m &gt; n: print(\"太大了\") else: print(\"太小了\") 4、类型判别及类型转换1）类型判别&ensp;&ensp;① type(变量)&ensp;&ensp;&ensp;&ensp;a=12345&ensp;&ensp;&ensp;&ensp;b=&#39;12345&#39;&ensp;&ensp;&ensp;&ensp;print(type(a))&ensp;&ensp;&ensp;&ensp;print(type(b))&ensp;&ensp;&ensp;&ensp;# &lt;class &#39;str&#39;&gt;&ensp;&ensp;&ensp;&ensp;# &lt;class &#39;int&#39;&gt;&ensp;&ensp;② isinstance(变量,预判类型)：判断变量是否为预判类型&ensp;&ensp;&ensp;&ensp;print(isinstance(a,int))&ensp;&ensp;③ isinstance(变量,预判类型)：判断变量是否为预判类型&ensp;&ensp;④ 字符串.isdigit()：判断字符串是否只含数字&ensp;&ensp;⑤ 字符串.isalpha()：判断字符串是否只含字母&ensp;&ensp;⑥ 字符串.isalnum()：判断字符串是否只含数字和字母2）类型转换&ensp;&ensp;① 数字类型转字符串：str(数字类型)&ensp;&ensp;&ensp;&ensp;age = 20&ensp;&ensp;&ensp;&ensp;str_age = str(age)&ensp;&ensp;② 仅有数字组成的字符串转成数字：int()、float()、eval()&ensp;&ensp;&ensp;&ensp;age = &quot;20.1&quot;&ensp;&ensp;&ensp;&ensp;int_age = int(age) # 只保留整数部分&ensp;&ensp;&ensp;&ensp;float_age = float(age)&ensp;&ensp;&ensp;&ensp;eval_age = eval(age)","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"Python基础","slug":"Python基础","permalink":"https://liuchengblog.github.io/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"人工智能学习目录","slug":"1、ZN-01","date":"01-16","updated":"01-16","comments":true,"path":"2020/01/16/1、ZN-01/","link":"","permalink":"https://liuchengblog.github.io/2020/01/16/1%E3%80%81ZN-01/","excerpt":"","text":"以《机器学习》、《深度学习》两本书为基本辅以CS231n和CS224n的视频课使用python3.7 + pycharm + pytorch + TensorFlow 来编程实现代码同时进行CV和NLP两个方向的论文学习最后进行几个实际的项目的实战 Python基础&ensp;&ensp;Python基础①：基础语法元素&ensp;&ensp;Python基础②：基本数据类型数学基础&ensp;&ensp;数学基础①：高数线代与概率论基础决策树支持向量机贝叶斯分类集成学习聚类降维与度量学习特征选择与稀疏学习计算学习理论半监督学习SVM概率图模型规则学习强化学习深度学习（神经网络）&ensp;&ensp;深度前馈网络&ensp;&ensp;深度学习中的正则化&ensp;&ensp;深度模型中的优化&ensp;&ensp;卷积网络&ensp;&ensp;序列建模-循环和递归网络&ensp;&ensp;实践方法论&ensp;&ensp;应用&ensp;&ensp;深度学习研究CS231n课程CS224n课程项目：自动编曲项目：人脸检测识别项目：图片生成文字","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"学习目录","slug":"学习目录","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"}]},{"title":"数学基础①：高数线代与概率论基础","slug":"1、ZN-03","date":"01-16","updated":"01-16","comments":true,"path":"2020/01/16/1、ZN-03/","link":"","permalink":"https://liuchengblog.github.io/2020/01/16/1%E3%80%81ZN-03/","excerpt":"","text":"机器学习与人工智能目录：https://blog.csdn.net/weixin_38608322/article/details/90698199本文参考：https://study.163.com/course/courseMain.htm?courseId=1006185120QR原理可以参考：https://blog.csdn.net/shushi6969/article/details/7992108最大似然估计可以参考：https://blog.csdn.net/u014182497/article/details/82252456、","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"数学基础","slug":"数学基础","permalink":"https://liuchengblog.github.io/tags/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"},{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}]},{"title":"Python基础①：基础语法元素","slug":"1、ZN-02","date":"01-16","updated":"01-16","comments":true,"path":"2020/01/16/1、ZN-02/","link":"","permalink":"https://liuchengblog.github.io/2020/01/16/1%E3%80%81ZN-02/","excerpt":"","text":"1、数据类型1）基本类型：数字、字符串、布尔值&ensp;&ensp;① 数字类型&ensp;&ensp;&ensp;&ensp;整形：2&ensp;&ensp;&ensp;&ensp;浮点型：2.0&ensp;&ensp;&ensp;&ensp;复数：2+3j&ensp;&ensp;② 字符串：用双引号” “包围的看作字符串&ensp;&ensp;&ensp;&ensp;例如 &quot;努巴尼真好吃”&ensp;&ensp;③ 布尔值2）组合类型：列表、元组、字典、集合&ensp;&ensp;① 列表：用[ , , ]包围的看作列表&ensp;&ensp;&ensp;&ensp;* 列表中元素有顺序&ensp;&ensp;&ensp;&ensp;* 通过下标访问列表元素&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a=[1,2,3]&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a[0]&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;输出的结果是1&ensp;&ensp;② 元组：用( , , )包围的看作元组&ensp;&ensp;&ensp;&ensp;* 元组中元素有顺序&ensp;&ensp;&ensp;&ensp;* 元组中的元素不能再修改&ensp;&ensp;&ensp;&ensp;* 通过下标访问元组元素&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a=(1,2,3)&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;a[0]&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;输出的结果是1&ensp;&ensp;③ 字典：用{key1:value1,key2:value2}包围的看作字典&ensp;&ensp;&ensp;&ensp;* 字典中元素没有顺序，所以不能通过下标访问元素&ensp;&ensp;&ensp;&ensp;* 通过key访问元组元素&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;student={201901:‘Chris&#39;,201902:&#39;Mary&#39;}&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;student[201901]&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;输出的结果是’Chris’&ensp;&ensp;④ 集合：用{value1,value2}包围的看作集合&ensp;&ensp;&ensp;&ensp;* 集合中元素没有顺序，所以不能通过下标访问元素&ensp;&ensp;&ensp;&ensp;* 集合中元素不能重复&ensp;&ensp;&ensp;&ensp;* 通过key访问元组元素 2、变量1）定义：可变的对象；要有变量名+赋值2）变量的命名&ensp;&ensp;① 变量名：大小写字母、数字、下划线、汉字及其组合&ensp;&ensp;② 非法变量名：不能开头数字、变量名中间不能用空格&ensp;&ensp;③ 命名方法：&ensp;&ensp;&ensp;&ensp;变量和函数名由多个单词组成，用_连接&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;age_of_student=[17,18,19]&ensp;&ensp;&ensp;&ensp;类名用驼峰命名法，即单词首字母大写&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;AgeOfStudents&ensp;&ensp;&ensp;&ensp;常量所有字母都大写&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;MAXONE=1232）变量的赋值&ensp;&ensp;① 一般赋值&ensp;&ensp;&ensp;&ensp;x = 1+2+3&ensp;&ensp;② 增量赋值&ensp;&ensp;&ensp;&ensp;x += 10&ensp;&ensp;&ensp;&ensp;相当于x = x+10&ensp;&ensp;&ensp;&ensp;x -= 10&ensp;&ensp;&ensp;&ensp;相当于x = x-10&ensp;&ensp;③ 打包赋值&ensp;&ensp;&ensp;&ensp;x, y = 1, 2&ensp;&ensp;&ensp;&ensp;x, y = y, x # 实现数据互换 3、控制流程1）顺序流程：自上而下依次执行 12345678# 实现1到5整数求和res = 0 # 变量初始化res += 1res += 2res += 3res += 4res += 5res # 显示结果 2）for循环 12345# 实现1到5整数求和res = 0 # 变量初始化for i in [1,2,3,4,5]: # 每次循环从后面列表中取出一个元素赋值给i res += ires # 显示结果 3）while循环 1234567# 实现1到5整数求和i = 1res = 0 # 变量初始化while i &lt;= 5: # 若i不大于5，则循环继续 res += i i += 1res # 循环条件为假，则跳出循环，显示结果 3）if分支 12345678age = 18res = 0 # 变量初始化if age &gt;22: print('可以结婚了’）elif age&gt;30: print('赶紧结婚')else: print('再等等吧') 4、输入输出1）输入来源&ensp;&ensp;① 外部文件导入：这部分放到《文件、异常和模块》中&ensp;&ensp;② 程序中定义&ensp;&ensp;&ensp;&ensp;x, y = 1, 2&ensp;&ensp;&ensp;&ensp;z = 1+2+3&ensp;&ensp;&ensp;&ensp;name = &#39;Tom&#39;&ensp;&ensp;③ 动态互动输入&ensp;&ensp;&ensp;&ensp;x = input(&#39;请输入一个数字&#39;)&ensp;&ensp;&ensp;&ensp;* input得到的变量是字符串型，即x是字符串变量&ensp;&ensp;&ensp;&ensp;* 用eval()方法可以将字符串变成数据&ensp;&ensp;&ensp;&ensp;x = eval(input(&#39;请输入一个数字&#39;))2）输出来源&ensp;&ensp;① 存储到硬盘或网络段：这部分放到《文件、异常和模块》中&ensp;&ensp;② 打印输出print&ensp;&ensp;&ensp;&ensp;print(&#39;努巴尼真好吃&#39;) # 打印字符串&ensp;&ensp;&ensp;&ensp;print(1234）# 打印数据&ensp;&ensp;&ensp;&ensp;print(x) # 打印变量&ensp;&ensp;&ensp;&ensp;print(&quot;PI=&quot;,PI,&quot;E=&quot;,E) # 组合输出&ensp;&ensp;&ensp;&ensp;print(&quot;PI={0}&quot;,&quot;E={1}&quot;.format(PI,E)) # 格式化输出&ensp;&ensp;&ensp;&ensp;* print函数默认换行&ensp;&ensp;&ensp;&ensp;* 如果不想换行可以加上end&ensp;&ensp;&ensp;&ensp;print(x, end=&quot; &quot;) # 不换行打印 5、程序格式1）行最大长度：79个字符2）缩进：用缩进表示代码的从属关系3）用#进行单行注释4）用三个双引号扩起注释内容","categories":[{"name":"人工智能与机器学习","slug":"人工智能与机器学习","permalink":"https://liuchengblog.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://liuchengblog.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"Python基础","slug":"Python基础","permalink":"https://liuchengblog.github.io/tags/Python%E5%9F%BA%E7%A1%80/"}]},{"title":"Markdown学习笔记","slug":"3、ZT-01","date":"01-14","updated":"01-14","comments":true,"path":"2020/01/14/3、ZT-01/","link":"","permalink":"https://liuchengblog.github.io/2020/01/14/3%E3%80%81ZT-01/","excerpt":"","text":"1、使用工具这里我使用的markdown编辑器是MarkdownPad2。在网上可以很容易搜到安装包和安装教程。这个工具有直接提供许多的快捷按钮，就不用去记markdown的格式了。另外，使用该工具的插入图片功能还是要引用本地图片，自带的上传图片功能所使用的网站被墙了。 2、标题使用“#”标记标题可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推. 123456# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 3、段落文字1）字体： 123456*斜体文本* _斜体文本_ **粗体文本** __粗体文本__ ***粗斜体文本*** ___粗斜体文本___ 2）换行：在末尾添加两个空格+回车3）分割线：—4）删除线：拉拉5）下划线：带下划线文本 4、列表1）无序列表：使用星号(*)、加号(+)或是减号(-)作为列表标记 123* 第一项* 第二项* 第三项 2）有序列表：使用数字并加上 . 号来表示 1231. 第一项2. 第二项3. 第三项 3）列表嵌套：在子列表中的选项添加四个空格 1234561. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 5、区块引用在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号 12&gt; 肥宅的力量&gt; 拯救世界 6、代码1）片段：使用反引号把它包起来（`） 1&#96;printf()&#96; 函数 2）区块：用 ```包裹一段代码 7、链接12[链接名称](链接地址)例如： [LCB](https:&#x2F;&#x2F;liuchengblog.github.io) 8、图片markdown中的图片显示有三种方法 1234561）插入本地图片 ![alt 属性文本](本地图片地址) 2）插入网络图片 ![alt 属性文本](图片网址) 3）把图片存入markdown文件 用base64转码工具把图片转成一段字符串，然后填到链接的位置 123456# 利用python转化的代码import base64 f&#x3D;open(&#39;723.png&#39;,&#39;rb&#39;) #二进制方式打开图文件 ls_f&#x3D;base64.b64encode(f.read()) #读取文件内容，转换为base64编码 f.close() print(ls_f) 9、表格1）用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行 1234| 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 | 2）-: 设置内容和标题栏居右对齐、:- 设置内容和标题栏居左对齐、:-: 设置内容和标题栏居中对齐 1234| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |","categories":[{"name":"学习杂谈","slug":"学习杂谈","permalink":"https://liuchengblog.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"学习杂谈","slug":"学习杂谈","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/"},{"name":"Markdown","slug":"Markdown","permalink":"https://liuchengblog.github.io/tags/Markdown/"}]},{"title":"网站搭建","slug":"3、ZT-02","date":"01-14","updated":"01-14","comments":true,"path":"2020/01/14/3、ZT-02/","link":"","permalink":"https://liuchengblog.github.io/2020/01/14/3%E3%80%81ZT-02/","excerpt":"","text":"1、前期准备Windows10+Github+hexo搭建提前说下，我这个网站使用的主题来自Github上ZEROKISEKI对“忧郁的弟弟”网站的移植。因为个人兴趣很喜欢这个主题，十分感谢ZEROKISEKI的移植。下面附上源主题链接，大家可以去支持下。然后正式开始搭建个人博客网站。 2、git的下载与安装1）git和GitHub的关系以及为什么要用git&emsp;&emsp; git的专业名称叫做：分布式版本控制系统。&emsp;&emsp; Github简单来说就是个存放代码的仓库。&emsp;&emsp; 我们网站搭建完成后，肯定要进行一些改动，或是修改网页设计，或是添加删除文章等。git的作用相当于对每次进行修改的文件打上版本号，保证我们每次从仓库中读取的文件是最新的版本。2）git的下载&emsp;&emsp; 官网的链接、百度云链接 提取码: d63x3）git的安装与配置&emsp;&emsp; 安装没有什么好说的，一直狂点next，最后点击install就好。&emsp;&emsp; 安装好之后在桌面点击右键 Git Bash Here&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; 在打开的窗口中输入如下指令：ssh-keygen -t rsa&emsp;&emsp;&emsp;&emsp; 3、Node.js的下载与安装1）Node.js的下载和安装&emsp;&emsp; 官网的链接、百度云链接 提取码: wsti&emsp;&emsp; 安装也是一直狂点next就好2）更换国内镜像&emsp;&emsp; 以管理员身份运行命令提示符&emsp;&emsp; 输入如下命令： 123npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org npm config get registry &#x2F;&#x2F;返回https:&#x2F;&#x2F;registry.npm.taobao.org，说明镜像配置成功。 npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org 4、安装Hexo搭建Hexo博客1）安装Hexo&emsp;&emsp; 打开 git bash，输入如下命令：&emsp;&emsp; $ cnpm install -g hexo-cli2）搭建Hexo博客&emsp;&emsp; 在电脑上新建一个专门用来存放你的博客的文件夹，如 D:\\Test在该文件夹下 右键-git bash here，然后输入：&emsp;&emsp;&emsp;&emsp; hexo init&emsp;&emsp;&emsp;&emsp; hexo server&emsp;&emsp; 完成之后，浏览器访问 http://localhost:4000 ，即可看到hexo博客页面&emsp;&emsp;&emsp;&emsp; 5、Github上创建网站代码仓库1）创建仓库&emsp;&emsp; 在GitHub上创建以你的GitHub用户名（注意不是昵称）命名的项目，例如我的GitHub用户名为 LiuChengBlog 那么我就创建一个名字为：LiuChengBlog.github.io 的项目。&emsp;&emsp;&emsp;&emsp; 2）创建SSH连接&emsp;&emsp; 打开Github的设置界面，依次点击SSH and GPG keys和New SSH Key&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; 然后用记事本打开如图路径下的 id_rsa.pub 文件&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; 将记事本中的全部内容复制到刚刚打开的SSH Keys的界面中，再点Add SSH key&emsp;&emsp;&emsp;&emsp; 3）复制仓库地址&emsp;&emsp; 创建好仓库后点开仓库，复制如图中的仓库地址&emsp;&emsp;&emsp;&emsp; 6、配置Hexo&emsp;&emsp; 打开刚才新建的Test文件夹，用记事本打开_config.yml配置文件，找到deploy，进行如下配置，完成保存。注意格式不能错。 1234deploy: type: git repository: https:&#x2F;&#x2F;github.com&#x2F;qiuyeyijian&#x2F; qiuyeyijian.github.io.git &#x2F;&#x2F;将地址换成自己的 branch: master &emsp;&emsp; 然后在Test文件夹下打开Git Bash，输入如下命令： 123npm install hexo-deployer-git –savehexo g &#x2F;&#x2F;（本地生成静态文件）hexo d &#x2F;&#x2F;（将本地静态文件推送至Github） &emsp;&emsp; 在Test文件夹下的Git Bash中，输入如下命令下载主题，这里以我这个用的主题为例 1$ git clone https:&#x2F;&#x2F;github.com&#x2F;ZEROKISEKI&#x2F;hexo-theme-gal themes&#x2F;gal &emsp;&emsp; 然后找到博客根目录下的config.yml配置文件中的theme属性，将其设置为gal&emsp;&emsp; 在根目录下的config.yml配置文件中添加如下的代码 123456789101112131415161718192021jsonContent: dateFormat: MM-DD pages: title: true text: true path: true date: true excerpt: true preview: true posts: title: true text: true path: true date: true excerpt: true tags: [&#123; name: tag.name, slug: tag.slug, permalink: tag.permalink &#125;] preview: true &emsp;&emsp; 在Test文件夹下的Git Bash中，输入如下命令 123456npm install hexo-renderer-sass --save npm install hexo-generator-json-content --savehexo new page &quot;search&quot; &#x2F;&#x2F; 搜索功能的必须步骤hexo new page &quot;404&quot; &#x2F;&#x2F; 开启404页面hexo new page &quot;tags&quot; &#x2F;&#x2F; 开启标签功能hexo new page &quot;categories&quot; &#x2F;&#x2F; 开启分类功能 &emsp;&emsp; 最后再次输入如下命令 12hexo g &#x2F;&#x2F;（本地生成静态文件）hexo d &#x2F;&#x2F;（将本地静态文件推送至Github） 7、结束至此，基础的设置都已经结束，现在打开你的网址应该就可以看到网页了例如我自己创建的，就输入： liuchengblog.github.io","categories":[{"name":"学习杂谈","slug":"学习杂谈","permalink":"https://liuchengblog.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"学习杂谈","slug":"学习杂谈","permalink":"https://liuchengblog.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/"},{"name":"网站搭建","slug":"网站搭建","permalink":"https://liuchengblog.github.io/tags/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"}]},{"title":"开言英语：“开心” 的表达方法","slug":"2、YY-01","date":"01-14","updated":"01-14","comments":true,"path":"2020/01/14/2、YY-01/","link":"","permalink":"https://liuchengblog.github.io/2020/01/14/2%E3%80%81YY-01/","excerpt":"","text":"","categories":[{"name":"英语学习","slug":"英语学习","permalink":"https://liuchengblog.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"开言英语","slug":"开言英语","permalink":"https://liuchengblog.github.io/tags/%E5%BC%80%E8%A8%80%E8%8B%B1%E8%AF%AD/"},{"name":"口语积累","slug":"口语积累","permalink":"https://liuchengblog.github.io/tags/%E5%8F%A3%E8%AF%AD%E7%A7%AF%E7%B4%AF/"}]}]}